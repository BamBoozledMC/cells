// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: message.proto

/*
Package broker is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Empty
	PublishRequest
	SubscribeRequest
	Message
*/
package broker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Broker service

type BrokerClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...client.CallOption) (*Empty, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (Broker_SubscribeClient, error)
}

type brokerClient struct {
	c           client.Client
	serviceName string
}

func NewBrokerClient(serviceName string, c client.Client) BrokerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "broker"
	}
	return &brokerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *brokerClient) Publish(ctx context.Context, in *PublishRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.serviceName, "Broker.Publish", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (Broker_SubscribeClient, error) {
	req := c.c.NewRequest(c.serviceName, "Broker.Subscribe", &SubscribeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &brokerSubscribeClient{stream}, nil
}

type Broker_SubscribeClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Message, error)
}

type brokerSubscribeClient struct {
	stream client.Streamer
}

func (x *brokerSubscribeClient) Close() error {
	return x.stream.Close()
}

func (x *brokerSubscribeClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *brokerSubscribeClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *brokerSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Broker service

type BrokerHandler interface {
	Publish(context.Context, *PublishRequest, *Empty) error
	Subscribe(context.Context, *SubscribeRequest, Broker_SubscribeStream) error
}

func RegisterBrokerHandler(s server.Server, hdlr BrokerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Broker{hdlr}, opts...))
}

type Broker struct {
	BrokerHandler
}

func (h *Broker) Publish(ctx context.Context, in *PublishRequest, out *Empty) error {
	return h.BrokerHandler.Publish(ctx, in, out)
}

func (h *Broker) Subscribe(ctx context.Context, stream server.Streamer) error {
	m := new(SubscribeRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.BrokerHandler.Subscribe(ctx, m, &brokerSubscribeStream{stream})
}

type Broker_SubscribeStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
}

type brokerSubscribeStream struct {
	stream server.Streamer
}

func (x *brokerSubscribeStream) Close() error {
	return x.stream.Close()
}

func (x *brokerSubscribeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *brokerSubscribeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *brokerSubscribeStream) Send(m *Message) error {
	return x.stream.Send(m)
}
