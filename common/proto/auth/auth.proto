syntax = "proto3";

package auth;

message Token {
    string Value = 1;           // The token to be invalidated
    string AdditionalInfo = 2;  // Other info that initiates the revokation
}

// AuthTokenRevoker
service AuthTokenRevoker {
    // Look for an invalid token entry in the store that match the current one
    rpc MatchInvalid (MatchInvalidTokenRequest) returns (MatchInvalidTokenResponse) {};

    // Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
    rpc Revoke (RevokeTokenRequest) returns (RevokeTokenResponse) {};

    // PruneTokens clear revoked tokens
    rpc PruneTokens (PruneTokensRequest) returns (PruneTokensResponse) {};
}

enum State {
    NO_MATCH = 0;
    REVOKED = 1;
}

message MatchInvalidTokenRequest {
    string Token = 1;           // The token to find in store
}

message MatchInvalidTokenResponse {
    State State = 1;            // The token to find in store
    string RevocationInfo = 2;  // If state is REFRESHED or REVOKE the user who initiates the token invalidation
}

message RevokeTokenRequest {
    Token Token = 1;
}

message RevokeTokenResponse {
    bool Success = 1;
}

message PruneTokensRequest {

}

message PruneTokensResponse {
    repeated string tokens = 1;
}

service LoginProvider {
    rpc GetLogin    (GetLoginRequest) returns (GetLoginResponse) {};
    rpc CreateLogin (CreateLoginRequest) returns (CreateLoginResponse) {};
    rpc AcceptLogin (AcceptLoginRequest) returns (AcceptLoginResponse) {};
}

message GetLoginRequest {
    string Challenge = 1;
}

message GetLoginResponse {
    string Challenge = 1;
    string Subject = 2;
    string SessionID = 3;
    string RequestURL = 4;
}

message CreateLoginRequest {}

message CreateLoginResponse {
    string Challenge = 1;
    string Verifier = 2;
}

message AcceptLoginRequest {
    string Challenge = 1;
    string Verifier = 2;
    string Subject = 3;
}

message AcceptLoginResponse {}

service ConsentProvider {
    rpc GetConsent    (GetConsentRequest) returns (GetConsentResponse) {};
    rpc CreateConsent (CreateConsentRequest) returns (CreateConsentResponse) {};
    rpc AcceptConsent (AcceptConsentRequest) returns (AcceptConsentResponse) {};
}

message GetConsentRequest {
    string Challenge = 1;
}

message GetConsentResponse {
    string Challenge = 1;
    string LoginSessionID = 2;
    string SubjectIdentifier = 3;
    string Subject = 4;
    string ClientID = 5;
}

message CreateConsentRequest {
    string LoginChallenge = 1;
}

message CreateConsentResponse {
    string Challenge = 1;
}

message AcceptConsentRequest {
    string Challenge = 1;
}

message AcceptConsentResponse {
}

service AuthCodeProvider {
    rpc CreateAuthCode (CreateAuthCodeRequest) returns (CreateAuthCodeResponse) {};
}

message CreateAuthCodeRequest {
    string ConsentChallenge = 1;
    string LoginSessionID = 2;
    string SubjectIdentifier = 3;
    string Subject = 4;
    string ClientID = 5;
}

message CreateAuthCodeResponse {
    string Code = 1;
}

// AuthTokenVerifier
service AuthTokenVerifier {
    // Verifies a token and returns claims
    rpc Verify (VerifyTokenRequest) returns (VerifyTokenResponse) {};
}

message VerifyTokenRequest {
    string Token = 1;
}

message VerifyTokenResponse {
    bool Success = 1;
    bytes Data = 2;
}

service AuthCodeExchanger {
    rpc Exchange(ExchangeRequest) returns (ExchangeResponse) {};
}

message ExchangeRequest {
    string Code = 1 [json_name="code"];
    string CodeVerifier = 2 [json_name="code_verifier"];
}

message ExchangeResponse {
    string AccessToken = 1 [json_name="access_token"];
    string IDToken = 2 [json_name="id_token"];
    string RefreshToken = 3 [json_name="refresh_token"];
    int64 Expiry = 4 [json_name="expiry"];
}

service AuthTokenRefresher {
    rpc Refresh(RefreshTokenRequest) returns (RefreshTokenResponse) {};
}

message RefreshTokenRequest {
    string RefreshToken = 1;
}

message RefreshTokenResponse {
    string AccessToken = 1 [json_name="access_token"];
    string IDToken = 2 [json_name="id_token"];
    string RefreshToken = 3 [json_name="refresh_token"];
    int64 Expiry = 4 [json_name="expiry"];
}