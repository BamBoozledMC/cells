syntax = "proto3";

package auth;

message Token {
    string Value = 1;           // The token to be invalidated
    string AdditionalInfo = 2;  // Other info that initiates the revokation
}

// AuthTokenRevoker
service AuthTokenRevoker {
    // Look for an invalid token entry in the store that match the current one
    rpc MatchInvalid (MatchInvalidTokenRequest) returns (MatchInvalidTokenResponse) {};

    // Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
    rpc Revoke (RevokeTokenRequest) returns (RevokeTokenResponse) {};

    // PruneTokens clear revoked tokens
    rpc PruneTokens (PruneTokensRequest) returns (PruneTokensResponse) {};
}

enum State {
    NO_MATCH = 0;
    REVOKED = 1;
}

message MatchInvalidTokenRequest {
    string Token = 1;           // The token to find in store
}

message MatchInvalidTokenResponse {
    State State = 1;            // The token to find in store
    string RevocationInfo = 2;  // If state is REFRESHED or REVOKE the user who initiates the token invalidation
}

message RevokeTokenRequest {
    Token Token = 1;
}

message RevokeTokenResponse {
    bool Success = 1;
}

message PruneTokensRequest {

}

message PruneTokensResponse {
    repeated string tokens = 1;
}

// AuthTokenVerifier
service AuthTokenVerifier {
    // Verifies a token and returns claims
    rpc Verify (VerifyTokenRequest) returns (VerifyTokenResponse) {};
}

message VerifyTokenRequest {
    string Token = 1;
}

message VerifyTokenResponse {
    bool Success = 1;
    bytes Data = 2;
}

service AuthCodeExchanger {
    rpc Exchange(ExchangeRequest) returns (ExchangeResponse) {};
}

message ExchangeRequest {
    string Code = 1 [json_name="code"];
    string CodeVerifier = 2 [json_name="code_verifier"];
}

message ExchangeResponse {
    string AccessToken = 1 [json_name="access_token"];
    string TokenType = 2 [json_name="token_type"];
    string RefreshToken = 3 [json_name="refresh_token"];
    string Expiry = 4 [json_name="expiry"];
}