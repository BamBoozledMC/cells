// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oauth.proto

package auth

import github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/struct"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *OAuth2ClientConfig) Validate() error {
	return nil
}
func (this *OAuth2ConnectorCollection) Validate() error {
	for _, item := range this.Connectors {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Connectors", err)
			}
		}
	}
	return nil
}
func (this *OAuth2ConnectorConfig) Validate() error {
	for _, item := range this.MappingRules {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("MappingRules", err)
			}
		}
	}
	if this.Config != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Config); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Config", err)
		}
	}
	return nil
}
func (this *OAuth2MappingRule) Validate() error {
	return nil
}
func (this *OAuth2ConnectorPydioConfig) Validate() error {
	for _, item := range this.Pydioconnectors {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Pydioconnectors", err)
			}
		}
	}
	return nil
}
func (this *OAuth2ConnectorPydioConfig_Connector) Validate() error {
	return nil
}
func (this *OAuth2ConnectorOIDCConfig) Validate() error {
	return nil
}
func (this *OAuth2ConnectorSAMLConfig) Validate() error {
	return nil
}
func (this *OAuth2ConnectorBitbucketConfig) Validate() error {
	return nil
}
func (this *OAuth2ConnectorGithubConfig) Validate() error {
	for _, item := range this.Orgs {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Orgs", err)
			}
		}
	}
	return nil
}
func (this *OAuth2ConnectorGithubConfigOrg) Validate() error {
	return nil
}
func (this *OAuth2ConnectorGitlabConfig) Validate() error {
	return nil
}
func (this *OAuth2ConnectorLinkedinConfig) Validate() error {
	return nil
}
func (this *OAuth2ConnectorMicrosoftConfig) Validate() error {
	return nil
}
