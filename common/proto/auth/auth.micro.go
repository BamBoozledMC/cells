// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthTokenRevoker service

type AuthTokenRevokerService interface {
	// Look for an invalid token entry in the store that match the current one
	MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, opts ...client.CallOption) (*MatchInvalidTokenResponse, error)
	// Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
	Revoke(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error)
	// PruneTokens clear revoked tokens
	PruneTokens(ctx context.Context, in *PruneTokensRequest, opts ...client.CallOption) (*PruneTokensResponse, error)
}

type authTokenRevokerService struct {
	c    client.Client
	name string
}

func NewAuthTokenRevokerService(name string, c client.Client) AuthTokenRevokerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "auth"
	}
	return &authTokenRevokerService{
		c:    c,
		name: name,
	}
}

func (c *authTokenRevokerService) MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, opts ...client.CallOption) (*MatchInvalidTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenRevoker.MatchInvalid", in)
	out := new(MatchInvalidTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerService) Revoke(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenRevoker.Revoke", in)
	out := new(RevokeTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerService) PruneTokens(ctx context.Context, in *PruneTokensRequest, opts ...client.CallOption) (*PruneTokensResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenRevoker.PruneTokens", in)
	out := new(PruneTokensResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenRevoker service

type AuthTokenRevokerHandler interface {
	// Look for an invalid token entry in the store that match the current one
	MatchInvalid(context.Context, *MatchInvalidTokenRequest, *MatchInvalidTokenResponse) error
	// Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
	Revoke(context.Context, *RevokeTokenRequest, *RevokeTokenResponse) error
	// PruneTokens clear revoked tokens
	PruneTokens(context.Context, *PruneTokensRequest, *PruneTokensResponse) error
}

func RegisterAuthTokenRevokerHandler(s server.Server, hdlr AuthTokenRevokerHandler, opts ...server.HandlerOption) error {
	type authTokenRevoker interface {
		MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, out *MatchInvalidTokenResponse) error
		Revoke(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error
		PruneTokens(ctx context.Context, in *PruneTokensRequest, out *PruneTokensResponse) error
	}
	type AuthTokenRevoker struct {
		authTokenRevoker
	}
	h := &authTokenRevokerHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthTokenRevoker{h}, opts...))
}

type authTokenRevokerHandler struct {
	AuthTokenRevokerHandler
}

func (h *authTokenRevokerHandler) MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, out *MatchInvalidTokenResponse) error {
	return h.AuthTokenRevokerHandler.MatchInvalid(ctx, in, out)
}

func (h *authTokenRevokerHandler) Revoke(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error {
	return h.AuthTokenRevokerHandler.Revoke(ctx, in, out)
}

func (h *authTokenRevokerHandler) PruneTokens(ctx context.Context, in *PruneTokensRequest, out *PruneTokensResponse) error {
	return h.AuthTokenRevokerHandler.PruneTokens(ctx, in, out)
}

// Client API for AuthTokenVerifier service

type AuthTokenVerifierService interface {
	// Verifies a token and returns claims
	Verify(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error)
}

type authTokenVerifierService struct {
	c    client.Client
	name string
}

func NewAuthTokenVerifierService(name string, c client.Client) AuthTokenVerifierService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "auth"
	}
	return &authTokenVerifierService{
		c:    c,
		name: name,
	}
}

func (c *authTokenVerifierService) Verify(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthTokenVerifier.Verify", in)
	out := new(VerifyTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenVerifier service

type AuthTokenVerifierHandler interface {
	// Verifies a token and returns claims
	Verify(context.Context, *VerifyTokenRequest, *VerifyTokenResponse) error
}

func RegisterAuthTokenVerifierHandler(s server.Server, hdlr AuthTokenVerifierHandler, opts ...server.HandlerOption) error {
	type authTokenVerifier interface {
		Verify(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error
	}
	type AuthTokenVerifier struct {
		authTokenVerifier
	}
	h := &authTokenVerifierHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthTokenVerifier{h}, opts...))
}

type authTokenVerifierHandler struct {
	AuthTokenVerifierHandler
}

func (h *authTokenVerifierHandler) Verify(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenResponse) error {
	return h.AuthTokenVerifierHandler.Verify(ctx, in, out)
}
