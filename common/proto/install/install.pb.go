// Code generated by protoc-gen-go. DO NOT EDIT.
// source: install.proto

/*
Package install is a generated protocol buffer package.

It is generated from these files:
	install.proto

It has these top-level messages:
	InstallConfig
	ProxyConfig
	TLSSelfSigned
	TLSLetsEncrypt
	TLSCertificate
	CheckResult
	PerformCheckRequest
	PerformCheckResponse
	GetDefaultsRequest
	GetDefaultsResponse
	GetAgreementRequest
	GetAgreementResponse
	InstallRequest
	InstallResponse
*/
package install

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InstallConfig struct {
	InternalUrl              string         `protobuf:"bytes,32,opt,name=internalUrl" json:"internalUrl,omitempty"`
	DbConnectionType         string         `protobuf:"bytes,1,opt,name=dbConnectionType" json:"dbConnectionType,omitempty"`
	DbTCPHostname            string         `protobuf:"bytes,2,opt,name=dbTCPHostname" json:"dbTCPHostname,omitempty"`
	DbTCPPort                string         `protobuf:"bytes,3,opt,name=dbTCPPort" json:"dbTCPPort,omitempty"`
	DbTCPName                string         `protobuf:"bytes,4,opt,name=dbTCPName" json:"dbTCPName,omitempty"`
	DbTCPUser                string         `protobuf:"bytes,5,opt,name=dbTCPUser" json:"dbTCPUser,omitempty"`
	DbTCPPassword            string         `protobuf:"bytes,6,opt,name=dbTCPPassword" json:"dbTCPPassword,omitempty"`
	DbSocketFile             string         `protobuf:"bytes,7,opt,name=dbSocketFile" json:"dbSocketFile,omitempty"`
	DbSocketName             string         `protobuf:"bytes,8,opt,name=dbSocketName" json:"dbSocketName,omitempty"`
	DbSocketUser             string         `protobuf:"bytes,9,opt,name=dbSocketUser" json:"dbSocketUser,omitempty"`
	DbSocketPassword         string         `protobuf:"bytes,10,opt,name=dbSocketPassword" json:"dbSocketPassword,omitempty"`
	DbManualDSN              string         `protobuf:"bytes,11,opt,name=dbManualDSN" json:"dbManualDSN,omitempty"`
	DsName                   string         `protobuf:"bytes,12,opt,name=dsName" json:"dsName,omitempty"`
	DsPort                   string         `protobuf:"bytes,13,opt,name=dsPort" json:"dsPort,omitempty"`
	DsType                   string         `protobuf:"bytes,15,opt,name=dsType" json:"dsType,omitempty"`
	DsS3Custom               string         `protobuf:"bytes,16,opt,name=dsS3Custom" json:"dsS3Custom,omitempty"`
	DsS3CustomRegion         string         `protobuf:"bytes,17,opt,name=dsS3CustomRegion" json:"dsS3CustomRegion,omitempty"`
	DsS3ApiKey               string         `protobuf:"bytes,18,opt,name=dsS3ApiKey" json:"dsS3ApiKey,omitempty"`
	DsS3ApiSecret            string         `protobuf:"bytes,19,opt,name=dsS3ApiSecret" json:"dsS3ApiSecret,omitempty"`
	DsS3BucketDefault        string         `protobuf:"bytes,20,opt,name=dsS3BucketDefault" json:"dsS3BucketDefault,omitempty"`
	DsS3BucketPersonal       string         `protobuf:"bytes,21,opt,name=dsS3BucketPersonal" json:"dsS3BucketPersonal,omitempty"`
	DsS3BucketCells          string         `protobuf:"bytes,22,opt,name=dsS3BucketCells" json:"dsS3BucketCells,omitempty"`
	DsS3BucketBinaries       string         `protobuf:"bytes,23,opt,name=dsS3BucketBinaries" json:"dsS3BucketBinaries,omitempty"`
	DsS3BucketThumbs         string         `protobuf:"bytes,35,opt,name=dsS3BucketThumbs" json:"dsS3BucketThumbs,omitempty"`
	DsS3BucketVersions       string         `protobuf:"bytes,36,opt,name=dsS3BucketVersions" json:"dsS3BucketVersions,omitempty"`
	DsFolder                 string         `protobuf:"bytes,14,opt,name=dsFolder" json:"dsFolder,omitempty"`
	FrontendHosts            string         `protobuf:"bytes,24,opt,name=frontendHosts" json:"frontendHosts,omitempty"`
	FrontendLogin            string         `protobuf:"bytes,25,opt,name=frontendLogin" json:"frontendLogin,omitempty"`
	FrontendPassword         string         `protobuf:"bytes,26,opt,name=frontendPassword" json:"frontendPassword,omitempty"`
	FrontendRepeatPassword   string         `protobuf:"bytes,27,opt,name=frontendRepeatPassword" json:"frontendRepeatPassword,omitempty"`
	FrontendApplicationTitle string         `protobuf:"bytes,28,opt,name=frontendApplicationTitle" json:"frontendApplicationTitle,omitempty"`
	FrontendDefaultLanguage  string         `protobuf:"bytes,33,opt,name=frontendDefaultLanguage" json:"frontendDefaultLanguage,omitempty"`
	LicenseRequired          bool           `protobuf:"varint,29,opt,name=licenseRequired" json:"licenseRequired,omitempty"`
	LicenseString            string         `protobuf:"bytes,30,opt,name=licenseString" json:"licenseString,omitempty"`
	CheckResults             []*CheckResult `protobuf:"bytes,31,rep,name=CheckResults" json:"CheckResults,omitempty"`
	// Additional proxy config (optional)
	ProxyConfig *ProxyConfig `protobuf:"bytes,34,opt,name=ProxyConfig" json:"ProxyConfig,omitempty"`
}

func (m *InstallConfig) Reset()                    { *m = InstallConfig{} }
func (m *InstallConfig) String() string            { return proto.CompactTextString(m) }
func (*InstallConfig) ProtoMessage()               {}
func (*InstallConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InstallConfig) GetInternalUrl() string {
	if m != nil {
		return m.InternalUrl
	}
	return ""
}

func (m *InstallConfig) GetDbConnectionType() string {
	if m != nil {
		return m.DbConnectionType
	}
	return ""
}

func (m *InstallConfig) GetDbTCPHostname() string {
	if m != nil {
		return m.DbTCPHostname
	}
	return ""
}

func (m *InstallConfig) GetDbTCPPort() string {
	if m != nil {
		return m.DbTCPPort
	}
	return ""
}

func (m *InstallConfig) GetDbTCPName() string {
	if m != nil {
		return m.DbTCPName
	}
	return ""
}

func (m *InstallConfig) GetDbTCPUser() string {
	if m != nil {
		return m.DbTCPUser
	}
	return ""
}

func (m *InstallConfig) GetDbTCPPassword() string {
	if m != nil {
		return m.DbTCPPassword
	}
	return ""
}

func (m *InstallConfig) GetDbSocketFile() string {
	if m != nil {
		return m.DbSocketFile
	}
	return ""
}

func (m *InstallConfig) GetDbSocketName() string {
	if m != nil {
		return m.DbSocketName
	}
	return ""
}

func (m *InstallConfig) GetDbSocketUser() string {
	if m != nil {
		return m.DbSocketUser
	}
	return ""
}

func (m *InstallConfig) GetDbSocketPassword() string {
	if m != nil {
		return m.DbSocketPassword
	}
	return ""
}

func (m *InstallConfig) GetDbManualDSN() string {
	if m != nil {
		return m.DbManualDSN
	}
	return ""
}

func (m *InstallConfig) GetDsName() string {
	if m != nil {
		return m.DsName
	}
	return ""
}

func (m *InstallConfig) GetDsPort() string {
	if m != nil {
		return m.DsPort
	}
	return ""
}

func (m *InstallConfig) GetDsType() string {
	if m != nil {
		return m.DsType
	}
	return ""
}

func (m *InstallConfig) GetDsS3Custom() string {
	if m != nil {
		return m.DsS3Custom
	}
	return ""
}

func (m *InstallConfig) GetDsS3CustomRegion() string {
	if m != nil {
		return m.DsS3CustomRegion
	}
	return ""
}

func (m *InstallConfig) GetDsS3ApiKey() string {
	if m != nil {
		return m.DsS3ApiKey
	}
	return ""
}

func (m *InstallConfig) GetDsS3ApiSecret() string {
	if m != nil {
		return m.DsS3ApiSecret
	}
	return ""
}

func (m *InstallConfig) GetDsS3BucketDefault() string {
	if m != nil {
		return m.DsS3BucketDefault
	}
	return ""
}

func (m *InstallConfig) GetDsS3BucketPersonal() string {
	if m != nil {
		return m.DsS3BucketPersonal
	}
	return ""
}

func (m *InstallConfig) GetDsS3BucketCells() string {
	if m != nil {
		return m.DsS3BucketCells
	}
	return ""
}

func (m *InstallConfig) GetDsS3BucketBinaries() string {
	if m != nil {
		return m.DsS3BucketBinaries
	}
	return ""
}

func (m *InstallConfig) GetDsS3BucketThumbs() string {
	if m != nil {
		return m.DsS3BucketThumbs
	}
	return ""
}

func (m *InstallConfig) GetDsS3BucketVersions() string {
	if m != nil {
		return m.DsS3BucketVersions
	}
	return ""
}

func (m *InstallConfig) GetDsFolder() string {
	if m != nil {
		return m.DsFolder
	}
	return ""
}

func (m *InstallConfig) GetFrontendHosts() string {
	if m != nil {
		return m.FrontendHosts
	}
	return ""
}

func (m *InstallConfig) GetFrontendLogin() string {
	if m != nil {
		return m.FrontendLogin
	}
	return ""
}

func (m *InstallConfig) GetFrontendPassword() string {
	if m != nil {
		return m.FrontendPassword
	}
	return ""
}

func (m *InstallConfig) GetFrontendRepeatPassword() string {
	if m != nil {
		return m.FrontendRepeatPassword
	}
	return ""
}

func (m *InstallConfig) GetFrontendApplicationTitle() string {
	if m != nil {
		return m.FrontendApplicationTitle
	}
	return ""
}

func (m *InstallConfig) GetFrontendDefaultLanguage() string {
	if m != nil {
		return m.FrontendDefaultLanguage
	}
	return ""
}

func (m *InstallConfig) GetLicenseRequired() bool {
	if m != nil {
		return m.LicenseRequired
	}
	return false
}

func (m *InstallConfig) GetLicenseString() string {
	if m != nil {
		return m.LicenseString
	}
	return ""
}

func (m *InstallConfig) GetCheckResults() []*CheckResult {
	if m != nil {
		return m.CheckResults
	}
	return nil
}

func (m *InstallConfig) GetProxyConfig() *ProxyConfig {
	if m != nil {
		return m.ProxyConfig
	}
	return nil
}

// ProxyConfig gives necessary URL and TLS configurations to start proxy
type ProxyConfig struct {
	// A list of [host]:port to bind to
	Binds []string `protobuf:"bytes,1,rep,name=Binds" json:"Binds,omitempty"`
	// Optional URL of reverse proxy exposing this site
	ReverseProxyURL string `protobuf:"bytes,3,opt,name=ReverseProxyURL" json:"ReverseProxyURL,omitempty"`
	// TLS configuration used for this site
	//
	// Types that are valid to be assigned to TLSConfig:
	//	*ProxyConfig_SelfSigned
	//	*ProxyConfig_LetsEncrypt
	//	*ProxyConfig_Certificate
	TLSConfig isProxyConfig_TLSConfig `protobuf_oneof:"TLSConfig"`
	// If TLS is set, whether to automatically redirect each http://host:port to https://host:port
	SSLRedirect bool `protobuf:"varint,2,opt,name=SSLRedirect" json:"SSLRedirect,omitempty"`
	// If set, this site will be in maintenance mode
	Maintenance bool `protobuf:"varint,7,opt,name=Maintenance" json:"Maintenance,omitempty"`
	// Append caddy directive to restrict maintenance mode
	MaintenanceConditions []string `protobuf:"bytes,8,rep,name=MaintenanceConditions" json:"MaintenanceConditions,omitempty"`
}

func (m *ProxyConfig) Reset()                    { *m = ProxyConfig{} }
func (m *ProxyConfig) String() string            { return proto.CompactTextString(m) }
func (*ProxyConfig) ProtoMessage()               {}
func (*ProxyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isProxyConfig_TLSConfig interface{ isProxyConfig_TLSConfig() }

type ProxyConfig_SelfSigned struct {
	SelfSigned *TLSSelfSigned `protobuf:"bytes,4,opt,name=SelfSigned,oneof"`
}
type ProxyConfig_LetsEncrypt struct {
	LetsEncrypt *TLSLetsEncrypt `protobuf:"bytes,5,opt,name=LetsEncrypt,oneof"`
}
type ProxyConfig_Certificate struct {
	Certificate *TLSCertificate `protobuf:"bytes,6,opt,name=Certificate,oneof"`
}

func (*ProxyConfig_SelfSigned) isProxyConfig_TLSConfig()  {}
func (*ProxyConfig_LetsEncrypt) isProxyConfig_TLSConfig() {}
func (*ProxyConfig_Certificate) isProxyConfig_TLSConfig() {}

func (m *ProxyConfig) GetTLSConfig() isProxyConfig_TLSConfig {
	if m != nil {
		return m.TLSConfig
	}
	return nil
}

func (m *ProxyConfig) GetBinds() []string {
	if m != nil {
		return m.Binds
	}
	return nil
}

func (m *ProxyConfig) GetReverseProxyURL() string {
	if m != nil {
		return m.ReverseProxyURL
	}
	return ""
}

func (m *ProxyConfig) GetSelfSigned() *TLSSelfSigned {
	if x, ok := m.GetTLSConfig().(*ProxyConfig_SelfSigned); ok {
		return x.SelfSigned
	}
	return nil
}

func (m *ProxyConfig) GetLetsEncrypt() *TLSLetsEncrypt {
	if x, ok := m.GetTLSConfig().(*ProxyConfig_LetsEncrypt); ok {
		return x.LetsEncrypt
	}
	return nil
}

func (m *ProxyConfig) GetCertificate() *TLSCertificate {
	if x, ok := m.GetTLSConfig().(*ProxyConfig_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (m *ProxyConfig) GetSSLRedirect() bool {
	if m != nil {
		return m.SSLRedirect
	}
	return false
}

func (m *ProxyConfig) GetMaintenance() bool {
	if m != nil {
		return m.Maintenance
	}
	return false
}

func (m *ProxyConfig) GetMaintenanceConditions() []string {
	if m != nil {
		return m.MaintenanceConditions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProxyConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProxyConfig_OneofMarshaler, _ProxyConfig_OneofUnmarshaler, _ProxyConfig_OneofSizer, []interface{}{
		(*ProxyConfig_SelfSigned)(nil),
		(*ProxyConfig_LetsEncrypt)(nil),
		(*ProxyConfig_Certificate)(nil),
	}
}

func _ProxyConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProxyConfig)
	// TLSConfig
	switch x := m.TLSConfig.(type) {
	case *ProxyConfig_SelfSigned:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelfSigned); err != nil {
			return err
		}
	case *ProxyConfig_LetsEncrypt:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LetsEncrypt); err != nil {
			return err
		}
	case *ProxyConfig_Certificate:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Certificate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProxyConfig.TLSConfig has unexpected type %T", x)
	}
	return nil
}

func _ProxyConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProxyConfig)
	switch tag {
	case 4: // TLSConfig.SelfSigned
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TLSSelfSigned)
		err := b.DecodeMessage(msg)
		m.TLSConfig = &ProxyConfig_SelfSigned{msg}
		return true, err
	case 5: // TLSConfig.LetsEncrypt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TLSLetsEncrypt)
		err := b.DecodeMessage(msg)
		m.TLSConfig = &ProxyConfig_LetsEncrypt{msg}
		return true, err
	case 6: // TLSConfig.Certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TLSCertificate)
		err := b.DecodeMessage(msg)
		m.TLSConfig = &ProxyConfig_Certificate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProxyConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProxyConfig)
	// TLSConfig
	switch x := m.TLSConfig.(type) {
	case *ProxyConfig_SelfSigned:
		s := proto.Size(x.SelfSigned)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProxyConfig_LetsEncrypt:
		s := proto.Size(x.LetsEncrypt)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ProxyConfig_Certificate:
		s := proto.Size(x.Certificate)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TLSSelfSigned generates a selfsigned certificate
type TLSSelfSigned struct {
	Hostnames []string `protobuf:"bytes,1,rep,name=Hostnames" json:"Hostnames,omitempty"`
}

func (m *TLSSelfSigned) Reset()                    { *m = TLSSelfSigned{} }
func (m *TLSSelfSigned) String() string            { return proto.CompactTextString(m) }
func (*TLSSelfSigned) ProtoMessage()               {}
func (*TLSSelfSigned) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TLSSelfSigned) GetHostnames() []string {
	if m != nil {
		return m.Hostnames
	}
	return nil
}

// TLSLetsEncrypt set up proxy to automatically get a valid certificate from let's encrypt servers
type TLSLetsEncrypt struct {
	Email      string `protobuf:"bytes,1,opt,name=Email" json:"Email,omitempty"`
	AcceptEULA bool   `protobuf:"varint,2,opt,name=AcceptEULA" json:"AcceptEULA,omitempty"`
	StagingCA  bool   `protobuf:"varint,3,opt,name=StagingCA" json:"StagingCA,omitempty"`
}

func (m *TLSLetsEncrypt) Reset()                    { *m = TLSLetsEncrypt{} }
func (m *TLSLetsEncrypt) String() string            { return proto.CompactTextString(m) }
func (*TLSLetsEncrypt) ProtoMessage()               {}
func (*TLSLetsEncrypt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TLSLetsEncrypt) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *TLSLetsEncrypt) GetAcceptEULA() bool {
	if m != nil {
		return m.AcceptEULA
	}
	return false
}

func (m *TLSLetsEncrypt) GetStagingCA() bool {
	if m != nil {
		return m.StagingCA
	}
	return false
}

// TLSCertificate is a TLSConfig where user passes
type TLSCertificate struct {
	CertFile    string `protobuf:"bytes,1,opt,name=CertFile" json:"CertFile,omitempty"`
	KeyFile     string `protobuf:"bytes,2,opt,name=KeyFile" json:"KeyFile,omitempty"`
	CellsRootCA string `protobuf:"bytes,3,opt,name=CellsRootCA" json:"CellsRootCA,omitempty"`
}

func (m *TLSCertificate) Reset()                    { *m = TLSCertificate{} }
func (m *TLSCertificate) String() string            { return proto.CompactTextString(m) }
func (*TLSCertificate) ProtoMessage()               {}
func (*TLSCertificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TLSCertificate) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *TLSCertificate) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *TLSCertificate) GetCellsRootCA() string {
	if m != nil {
		return m.CellsRootCA
	}
	return ""
}

type CheckResult struct {
	Name       string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Success    bool   `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	JsonResult string `protobuf:"bytes,3,opt,name=JsonResult" json:"JsonResult,omitempty"`
}

func (m *CheckResult) Reset()                    { *m = CheckResult{} }
func (m *CheckResult) String() string            { return proto.CompactTextString(m) }
func (*CheckResult) ProtoMessage()               {}
func (*CheckResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CheckResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CheckResult) GetJsonResult() string {
	if m != nil {
		return m.JsonResult
	}
	return ""
}

type PerformCheckRequest struct {
	Name   string         `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Config *InstallConfig `protobuf:"bytes,2,opt,name=Config" json:"Config,omitempty"`
}

func (m *PerformCheckRequest) Reset()                    { *m = PerformCheckRequest{} }
func (m *PerformCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*PerformCheckRequest) ProtoMessage()               {}
func (*PerformCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PerformCheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PerformCheckRequest) GetConfig() *InstallConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type PerformCheckResponse struct {
	Result *CheckResult `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *PerformCheckResponse) Reset()                    { *m = PerformCheckResponse{} }
func (m *PerformCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*PerformCheckResponse) ProtoMessage()               {}
func (*PerformCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PerformCheckResponse) GetResult() *CheckResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GetDefaultsRequest struct {
}

func (m *GetDefaultsRequest) Reset()                    { *m = GetDefaultsRequest{} }
func (m *GetDefaultsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDefaultsRequest) ProtoMessage()               {}
func (*GetDefaultsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetDefaultsResponse struct {
	Config *InstallConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *GetDefaultsResponse) Reset()                    { *m = GetDefaultsResponse{} }
func (m *GetDefaultsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDefaultsResponse) ProtoMessage()               {}
func (*GetDefaultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetDefaultsResponse) GetConfig() *InstallConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type GetAgreementRequest struct {
}

func (m *GetAgreementRequest) Reset()                    { *m = GetAgreementRequest{} }
func (m *GetAgreementRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAgreementRequest) ProtoMessage()               {}
func (*GetAgreementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetAgreementResponse struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *GetAgreementResponse) Reset()                    { *m = GetAgreementResponse{} }
func (m *GetAgreementResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAgreementResponse) ProtoMessage()               {}
func (*GetAgreementResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetAgreementResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type InstallRequest struct {
	Config *InstallConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
}

func (m *InstallRequest) Reset()                    { *m = InstallRequest{} }
func (m *InstallRequest) String() string            { return proto.CompactTextString(m) }
func (*InstallRequest) ProtoMessage()               {}
func (*InstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *InstallRequest) GetConfig() *InstallConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type InstallResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *InstallResponse) Reset()                    { *m = InstallResponse{} }
func (m *InstallResponse) String() string            { return proto.CompactTextString(m) }
func (*InstallResponse) ProtoMessage()               {}
func (*InstallResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *InstallResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*InstallConfig)(nil), "install.InstallConfig")
	proto.RegisterType((*ProxyConfig)(nil), "install.ProxyConfig")
	proto.RegisterType((*TLSSelfSigned)(nil), "install.TLSSelfSigned")
	proto.RegisterType((*TLSLetsEncrypt)(nil), "install.TLSLetsEncrypt")
	proto.RegisterType((*TLSCertificate)(nil), "install.TLSCertificate")
	proto.RegisterType((*CheckResult)(nil), "install.CheckResult")
	proto.RegisterType((*PerformCheckRequest)(nil), "install.PerformCheckRequest")
	proto.RegisterType((*PerformCheckResponse)(nil), "install.PerformCheckResponse")
	proto.RegisterType((*GetDefaultsRequest)(nil), "install.GetDefaultsRequest")
	proto.RegisterType((*GetDefaultsResponse)(nil), "install.GetDefaultsResponse")
	proto.RegisterType((*GetAgreementRequest)(nil), "install.GetAgreementRequest")
	proto.RegisterType((*GetAgreementResponse)(nil), "install.GetAgreementResponse")
	proto.RegisterType((*InstallRequest)(nil), "install.InstallRequest")
	proto.RegisterType((*InstallResponse)(nil), "install.InstallResponse")
}

func init() { proto.RegisterFile("install.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x52, 0x1b, 0x47,
	0x13, 0xb5, 0x8c, 0x2d, 0xa4, 0x16, 0x18, 0x7b, 0x10, 0x30, 0x1f, 0xc6, 0xfe, 0x94, 0x8d, 0x2f,
	0x28, 0xc7, 0xe1, 0x02, 0xa7, 0x5c, 0x54, 0x92, 0x8b, 0x08, 0x81, 0x43, 0x82, 0x4c, 0xa9, 0x76,
	0x21, 0x55, 0xa9, 0x5c, 0xad, 0x76, 0x5b, 0x62, 0xcb, 0xab, 0x19, 0x79, 0x67, 0x94, 0x98, 0x37,
	0xc8, 0xdb, 0xe4, 0x8d, 0xf2, 0x2c, 0xa9, 0xe9, 0x99, 0x95, 0x66, 0x05, 0xa4, 0x2a, 0x77, 0xea,
	0x73, 0x4e, 0xff, 0x4c, 0xf7, 0x6c, 0x8f, 0x60, 0x3d, 0x13, 0x4a, 0xc7, 0x79, 0x7e, 0x30, 0x2d,
	0xa4, 0x96, 0x6c, 0xd5, 0x99, 0xc1, 0x5f, 0x2d, 0x58, 0xff, 0xc9, 0xfe, 0xee, 0x49, 0x31, 0xca,
	0xc6, 0xac, 0x03, 0xad, 0x4c, 0x68, 0x2c, 0x44, 0x9c, 0x5f, 0x15, 0x39, 0xef, 0x74, 0x6a, 0xfb,
	0xcd, 0xd0, 0x87, 0xd8, 0x6b, 0x78, 0x9a, 0x0e, 0x7b, 0x52, 0x08, 0x4c, 0x74, 0x26, 0xc5, 0xe5,
	0xcd, 0x14, 0x79, 0x8d, 0x64, 0xb7, 0x70, 0xf6, 0x0a, 0xd6, 0xd3, 0xe1, 0x65, 0x6f, 0x70, 0x26,
	0x95, 0x16, 0xf1, 0x04, 0xf9, 0x43, 0x12, 0x56, 0x41, 0xb6, 0x07, 0x4d, 0x02, 0x06, 0xb2, 0xd0,
	0x7c, 0x85, 0x14, 0x0b, 0x60, 0xce, 0x5e, 0x18, 0xff, 0x47, 0x1e, 0x7b, 0xe1, 0xfb, 0x5e, 0x29,
	0x2c, 0xf8, 0x63, 0x8f, 0x35, 0xc0, 0x3c, 0xff, 0x20, 0x56, 0xea, 0x0f, 0x59, 0xa4, 0xbc, 0xee,
	0xe5, 0x2f, 0x41, 0x16, 0xc0, 0x5a, 0x3a, 0x8c, 0x64, 0xf2, 0x11, 0xf5, 0xfb, 0x2c, 0x47, 0xbe,
	0x4a, 0xa2, 0x0a, 0xe6, 0x6b, 0xa8, 0x90, 0x46, 0x55, 0x43, 0xb5, 0x78, 0x1a, 0x2a, 0xa7, 0x59,
	0xd5, 0x50, 0x45, 0xd4, 0x3d, 0x6b, 0xcf, 0x8b, 0x82, 0xb2, 0x7b, 0x55, 0xdc, 0xcc, 0x22, 0x1d,
	0x7e, 0x88, 0xc5, 0x2c, 0xce, 0x4f, 0xa2, 0x0b, 0xde, 0xb2, 0xb3, 0xf0, 0x20, 0xb6, 0x0d, 0xf5,
	0x54, 0x51, 0x3d, 0x6b, 0x44, 0x3a, 0xcb, 0xe2, 0xd4, 0xce, 0xf5, 0x12, 0xa7, 0x5e, 0x12, 0x4e,
	0x13, 0xdb, 0x28, 0x71, 0x9a, 0xd3, 0x4b, 0x80, 0x54, 0x45, 0x6f, 0x7b, 0x33, 0xa5, 0xe5, 0x84,
	0x3f, 0x25, 0xce, 0x43, 0xa8, 0xea, 0xb9, 0x15, 0xe2, 0x38, 0x93, 0x82, 0x3f, 0x73, 0x55, 0x2f,
	0xe1, 0x65, 0xac, 0xee, 0x34, 0x3b, 0xc7, 0x1b, 0xce, 0x16, 0xb1, 0x2c, 0x42, 0x33, 0xb1, 0x56,
	0x84, 0x49, 0x81, 0x9a, 0x6f, 0xba, 0x99, 0xf8, 0x20, 0x7b, 0x03, 0xcf, 0x0c, 0x70, 0x3c, 0x33,
	0x1d, 0x39, 0xc1, 0x51, 0x3c, 0xcb, 0x35, 0x6f, 0x93, 0xf2, 0x36, 0xc1, 0x0e, 0x80, 0x2d, 0xc0,
	0x01, 0x16, 0x4a, 0x8a, 0x38, 0xe7, 0x5b, 0x24, 0xbf, 0x83, 0x61, 0xfb, 0xb0, 0xb1, 0x40, 0x7b,
	0x98, 0xe7, 0x8a, 0x6f, 0x93, 0x78, 0x19, 0xae, 0x46, 0x3e, 0xce, 0x44, 0x5c, 0x64, 0xa8, 0xf8,
	0xce, 0x72, 0xe4, 0x92, 0x29, 0x3b, 0x65, 0xd1, 0xcb, 0xeb, 0xd9, 0x64, 0xa8, 0xf8, 0x97, 0x8b,
	0x4e, 0xf9, 0x78, 0x35, 0xf6, 0x2f, 0x58, 0xa8, 0x4c, 0x0a, 0xc5, 0x5f, 0x2d, 0xc7, 0x2e, 0x19,
	0xb6, 0x0b, 0x8d, 0x54, 0xbd, 0x97, 0x79, 0x8a, 0x05, 0x7f, 0x42, 0xaa, 0xb9, 0x6d, 0xba, 0x3a,
	0x2a, 0xa4, 0xd0, 0x28, 0x52, 0xf3, 0x5d, 0x29, 0xce, 0x6d, 0x57, 0x2b, 0xa0, 0xaf, 0xea, 0xcb,
	0x71, 0x26, 0xf8, 0xff, 0xaa, 0x2a, 0x02, 0xcd, 0x19, 0x4a, 0x60, 0x7e, 0x47, 0x77, 0xed, 0x19,
	0x96, 0x71, 0xf6, 0x0e, 0xb6, 0x4b, 0x2c, 0xc4, 0x29, 0xc6, 0x8b, 0x5b, 0xfd, 0x9c, 0x3c, 0xee,
	0x61, 0xd9, 0xb7, 0xc0, 0x4b, 0xa6, 0x3b, 0x9d, 0xe6, 0x59, 0x12, 0xd3, 0xd2, 0xc8, 0x74, 0x8e,
	0x7c, 0x8f, 0x3c, 0xef, 0xe5, 0xd9, 0x11, 0xec, 0x94, 0x9c, 0xbb, 0x00, 0xfd, 0x58, 0x8c, 0x67,
	0xf1, 0x18, 0xf9, 0x17, 0xe4, 0x7a, 0x1f, 0x6d, 0xe6, 0x9e, 0x67, 0x09, 0x0a, 0x85, 0x21, 0x7e,
	0x9a, 0x65, 0x05, 0xa6, 0xfc, 0x45, 0xa7, 0xb6, 0xdf, 0x08, 0x97, 0x61, 0xd3, 0x29, 0x07, 0x45,
	0xba, 0xc8, 0xc4, 0x98, 0xbf, 0xb4, 0x9d, 0xaa, 0x80, 0xec, 0x08, 0xd6, 0x7a, 0xd7, 0x98, 0x7c,
	0x0c, 0x51, 0xcd, 0x72, 0xad, 0xf8, 0xff, 0x3b, 0x2b, 0xfb, 0xad, 0xc3, 0xf6, 0x41, 0xb9, 0x6e,
	0x3d, 0x32, 0xac, 0x28, 0xd9, 0x3b, 0x68, 0x0d, 0x0a, 0xf9, 0xf9, 0xc6, 0xae, 0x5d, 0x1e, 0x74,
	0x6a, 0x15, 0x47, 0x8f, 0x0b, 0x7d, 0x61, 0xf0, 0xe7, 0x4a, 0xc5, 0x91, 0xb5, 0xe1, 0xf1, 0x71,
	0x26, 0x52, 0xc5, 0x6b, 0x9d, 0x95, 0xfd, 0x66, 0x68, 0x0d, 0x73, 0xce, 0x10, 0x7f, 0xc7, 0x42,
	0x21, 0x69, 0xaf, 0xc2, 0xbe, 0xdb, 0xab, 0xcb, 0x30, 0x3b, 0x02, 0x88, 0x30, 0x1f, 0x45, 0xd9,
	0x58, 0x60, 0x4a, 0xeb, 0xb5, 0x75, 0xb8, 0x3d, 0x2f, 0xe3, 0xb2, 0x1f, 0x2d, 0xd8, 0xb3, 0x07,
	0xa1, 0xa7, 0x65, 0xdf, 0x41, 0xab, 0x8f, 0x5a, 0x9d, 0x8a, 0xa4, 0xb8, 0x99, 0x6a, 0xda, 0xbd,
	0xad, 0xc3, 0x1d, 0xdf, 0xd5, 0xa3, 0xcf, 0x1e, 0x84, 0xbe, 0xda, 0x38, 0xf7, 0xb0, 0xd0, 0xd9,
	0xc8, 0x0c, 0x16, 0x69, 0x2d, 0x2f, 0x39, 0x7b, 0xb4, 0x71, 0xf6, 0x4c, 0xb3, 0x17, 0xa3, 0xa8,
	0x1f, 0x62, 0x9a, 0x15, 0x98, 0x68, 0x7a, 0x53, 0x1a, 0xa1, 0x0f, 0x19, 0xc5, 0x87, 0xd8, 0x3c,
	0x5a, 0x22, 0x16, 0x89, 0x5d, 0xe8, 0x8d, 0xd0, 0x87, 0xd8, 0x37, 0xb0, 0xe5, 0x99, 0x3d, 0x29,
	0xd2, 0x4c, 0xd3, 0xe7, 0xd7, 0xa0, 0x3e, 0xde, 0x4d, 0x1e, 0xb7, 0xa0, 0x69, 0x4a, 0xb3, 0xa3,
	0xf8, 0x1a, 0xd6, 0x2b, 0xfd, 0x31, 0x6f, 0x51, 0xf9, 0xa6, 0x95, 0xf3, 0x58, 0x00, 0x41, 0x0a,
	0x4f, 0xaa, 0x3d, 0x31, 0xb3, 0x3b, 0x9d, 0xc4, 0x59, 0xee, 0x9e, 0x4f, 0x6b, 0x98, 0xfd, 0xd9,
	0x4d, 0x12, 0x9c, 0xea, 0xd3, 0xab, 0x7e, 0xd7, 0x1d, 0xce, 0x43, 0x4c, 0x96, 0x48, 0xc7, 0xe3,
	0x4c, 0x8c, 0x7b, 0x5d, 0x9a, 0x6a, 0x23, 0x5c, 0x00, 0xc1, 0x35, 0x65, 0xf1, 0xbb, 0xb5, 0x0b,
	0x0d, 0x63, 0xd2, 0xcb, 0x66, 0x13, 0xcd, 0x6d, 0xc6, 0x61, 0xf5, 0x1c, 0x6f, 0x88, 0xb2, 0x2f,
	0x73, 0x69, 0x9a, 0x0e, 0xd2, 0x02, 0x0c, 0xa5, 0xd4, 0x2e, 0x4f, 0x33, 0xf4, 0xa1, 0xe0, 0x37,
	0x68, 0x79, 0x37, 0x9a, 0x31, 0x78, 0x44, 0x0f, 0x91, 0x4d, 0x41, 0xbf, 0x4d, 0xf8, 0x68, 0x96,
	0x24, 0xa8, 0x94, 0x3b, 0x47, 0x69, 0x9a, 0x43, 0xfe, 0xac, 0xa4, 0xb0, 0xbe, 0x2e, 0xba, 0x87,
	0x04, 0xbf, 0xc2, 0xe6, 0x00, 0x8b, 0x91, 0x2c, 0x26, 0x2e, 0xc7, 0xa7, 0x19, 0xaa, 0xbb, 0x93,
	0x1c, 0x40, 0xdd, 0x7d, 0x44, 0x0f, 0x97, 0x6e, 0x6f, 0xe5, 0x9f, 0x4d, 0xe8, 0x54, 0xc1, 0x09,
	0xb4, 0xab, 0xa1, 0xd5, 0x54, 0x0a, 0x85, 0xec, 0x0d, 0xd4, 0x5d, 0x39, 0xb5, 0xa5, 0x8f, 0xd1,
	0xff, 0x8a, 0x9d, 0x26, 0x68, 0x03, 0xfb, 0x71, 0xfe, 0xfe, 0x28, 0x57, 0x5f, 0x70, 0x0a, 0x9b,
	0x15, 0xd4, 0x85, 0x3e, 0x80, 0x7a, 0x62, 0x4b, 0xac, 0xfd, 0x7b, 0x89, 0x56, 0x15, 0x6c, 0x51,
	0x98, 0xee, 0xb8, 0x40, 0x9c, 0xa0, 0xd0, 0x65, 0xf4, 0xd7, 0xd0, 0xae, 0xc2, 0x2e, 0x3c, 0x83,
	0x47, 0x97, 0xf8, 0x59, 0x97, 0x5d, 0x31, 0xbf, 0x83, 0x1f, 0xe0, 0x89, 0x8b, 0x5d, 0xf6, 0xee,
	0xbf, 0x16, 0xf1, 0x15, 0x6c, 0xcc, 0x23, 0xb8, 0x44, 0x1c, 0x56, 0x95, 0x9b, 0x67, 0xcd, 0xce,
	0xd3, 0x99, 0x87, 0x7f, 0xd7, 0x60, 0xd5, 0xa9, 0xd9, 0x19, 0xb4, 0xbc, 0x26, 0xb0, 0xe7, 0xf3,
	0x3c, 0xb7, 0x1b, 0xb6, 0xbb, 0x77, 0x37, 0xe9, 0xf2, 0x7d, 0xbf, 0x08, 0xba, 0xb3, 0x5c, 0x6d,
	0x19, 0x81, 0xdf, 0x26, 0x9c, 0xf7, 0x39, 0xac, 0xf9, 0x83, 0x66, 0x8b, 0x5c, 0x77, 0x5c, 0xad,
	0xdd, 0x17, 0xf7, 0xb0, 0x36, 0xd8, 0xb0, 0x4e, 0xff, 0x9c, 0xdf, 0xfe, 0x13, 0x00, 0x00, 0xff,
	0xff, 0x14, 0x63, 0x6e, 0x11, 0x4a, 0x0b, 0x00, 0x00,
}
