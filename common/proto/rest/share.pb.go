// Code generated by protoc-gen-go. DO NOT EDIT.
// source: share.proto

package rest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service "github.com/pydio/cells/common/service/proto"
import idm "github.com/pydio/cells/common/proto/idm"
import tree "github.com/pydio/cells/common/proto/tree"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Known values for link permissions
type ShareLinkAccessType int32

const (
	ShareLinkAccessType_NoAccess ShareLinkAccessType = 0
	ShareLinkAccessType_Preview  ShareLinkAccessType = 1
	ShareLinkAccessType_Download ShareLinkAccessType = 2
	ShareLinkAccessType_Upload   ShareLinkAccessType = 3
)

var ShareLinkAccessType_name = map[int32]string{
	0: "NoAccess",
	1: "Preview",
	2: "Download",
	3: "Upload",
}
var ShareLinkAccessType_value = map[string]int32{
	"NoAccess": 0,
	"Preview":  1,
	"Download": 2,
	"Upload":   3,
}

func (x ShareLinkAccessType) String() string {
	return proto.EnumName(ShareLinkAccessType_name, int32(x))
}
func (ShareLinkAccessType) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

type ListSharedResourcesRequest_ListShareType int32

const (
	ListSharedResourcesRequest_ANY   ListSharedResourcesRequest_ListShareType = 0
	ListSharedResourcesRequest_LINKS ListSharedResourcesRequest_ListShareType = 1
	ListSharedResourcesRequest_CELLS ListSharedResourcesRequest_ListShareType = 2
)

var ListSharedResourcesRequest_ListShareType_name = map[int32]string{
	0: "ANY",
	1: "LINKS",
	2: "CELLS",
}
var ListSharedResourcesRequest_ListShareType_value = map[string]int32{
	"ANY":   0,
	"LINKS": 1,
	"CELLS": 2,
}

func (x ListSharedResourcesRequest_ListShareType) String() string {
	return proto.EnumName(ListSharedResourcesRequest_ListShareType_name, int32(x))
}
func (ListSharedResourcesRequest_ListShareType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{12, 0}
}

// Group collected acls by subjects
type CellAcl struct {
	RoleId     string           `protobuf:"bytes,1,opt,name=RoleId" json:"RoleId,omitempty"`
	Actions    []*idm.ACLAction `protobuf:"bytes,2,rep,name=Actions" json:"Actions,omitempty"`
	IsUserRole bool             `protobuf:"varint,3,opt,name=IsUserRole" json:"IsUserRole,omitempty"`
	User       *idm.User        `protobuf:"bytes,4,opt,name=User" json:"User,omitempty"`
	Group      *idm.User        `protobuf:"bytes,5,opt,name=Group" json:"Group,omitempty"`
	Role       *idm.Role        `protobuf:"bytes,6,opt,name=Role" json:"Role,omitempty"`
}

func (m *CellAcl) Reset()                    { *m = CellAcl{} }
func (m *CellAcl) String() string            { return proto.CompactTextString(m) }
func (*CellAcl) ProtoMessage()               {}
func (*CellAcl) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *CellAcl) GetRoleId() string {
	if m != nil {
		return m.RoleId
	}
	return ""
}

func (m *CellAcl) GetActions() []*idm.ACLAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *CellAcl) GetIsUserRole() bool {
	if m != nil {
		return m.IsUserRole
	}
	return false
}

func (m *CellAcl) GetUser() *idm.User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CellAcl) GetGroup() *idm.User {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *CellAcl) GetRole() *idm.Role {
	if m != nil {
		return m.Role
	}
	return nil
}

// Model for representing a shared room
type Cell struct {
	Uuid                    string                    `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Label                   string                    `protobuf:"bytes,2,opt,name=Label" json:"Label,omitempty"`
	Description             string                    `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	RootNodes               []*tree.Node              `protobuf:"bytes,4,rep,name=RootNodes" json:"RootNodes,omitempty"`
	ACLs                    map[string]*CellAcl       `protobuf:"bytes,5,rep,name=ACLs" json:"ACLs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Policies                []*service.ResourcePolicy `protobuf:"bytes,6,rep,name=Policies" json:"Policies,omitempty"`
	PoliciesContextEditable bool                      `protobuf:"varint,7,opt,name=PoliciesContextEditable" json:"PoliciesContextEditable,omitempty"`
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *Cell) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Cell) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Cell) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cell) GetRootNodes() []*tree.Node {
	if m != nil {
		return m.RootNodes
	}
	return nil
}

func (m *Cell) GetACLs() map[string]*CellAcl {
	if m != nil {
		return m.ACLs
	}
	return nil
}

func (m *Cell) GetPolicies() []*service.ResourcePolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *Cell) GetPoliciesContextEditable() bool {
	if m != nil {
		return m.PoliciesContextEditable
	}
	return false
}

type ShareLinkTargetUser struct {
	Display       string `protobuf:"bytes,1,opt,name=Display" json:"Display,omitempty"`
	DownloadCount int32  `protobuf:"varint,2,opt,name=DownloadCount" json:"DownloadCount,omitempty"`
}

func (m *ShareLinkTargetUser) Reset()                    { *m = ShareLinkTargetUser{} }
func (m *ShareLinkTargetUser) String() string            { return proto.CompactTextString(m) }
func (*ShareLinkTargetUser) ProtoMessage()               {}
func (*ShareLinkTargetUser) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *ShareLinkTargetUser) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *ShareLinkTargetUser) GetDownloadCount() int32 {
	if m != nil {
		return m.DownloadCount
	}
	return 0
}

// Model for representing a public link
type ShareLink struct {
	Uuid                    string                          `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	LinkHash                string                          `protobuf:"bytes,2,opt,name=LinkHash" json:"LinkHash,omitempty"`
	LinkUrl                 string                          `protobuf:"bytes,3,opt,name=LinkUrl" json:"LinkUrl,omitempty"`
	Label                   string                          `protobuf:"bytes,4,opt,name=Label" json:"Label,omitempty"`
	Description             string                          `protobuf:"bytes,5,opt,name=Description" json:"Description,omitempty"`
	UserUuid                string                          `protobuf:"bytes,6,opt,name=UserUuid" json:"UserUuid,omitempty"`
	UserLogin               string                          `protobuf:"bytes,7,opt,name=UserLogin" json:"UserLogin,omitempty"`
	PasswordRequired        bool                            `protobuf:"varint,8,opt,name=PasswordRequired" json:"PasswordRequired,omitempty"`
	AccessStart             int64                           `protobuf:"varint,9,opt,name=AccessStart" json:"AccessStart,omitempty"`
	AccessEnd               int64                           `protobuf:"varint,10,opt,name=AccessEnd" json:"AccessEnd,omitempty"`
	MaxDownloads            int64                           `protobuf:"varint,11,opt,name=MaxDownloads" json:"MaxDownloads,omitempty"`
	CurrentDownloads        int64                           `protobuf:"varint,12,opt,name=CurrentDownloads" json:"CurrentDownloads,omitempty"`
	ViewTemplateName        string                          `protobuf:"bytes,13,opt,name=ViewTemplateName" json:"ViewTemplateName,omitempty"`
	TargetUsers             map[string]*ShareLinkTargetUser `protobuf:"bytes,14,rep,name=TargetUsers" json:"TargetUsers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RestrictToTargetUsers   bool                            `protobuf:"varint,15,opt,name=RestrictToTargetUsers" json:"RestrictToTargetUsers,omitempty"`
	RootNodes               []*tree.Node                    `protobuf:"bytes,16,rep,name=RootNodes" json:"RootNodes,omitempty"`
	Permissions             []ShareLinkAccessType           `protobuf:"varint,17,rep,packed,name=Permissions,enum=rest.ShareLinkAccessType" json:"Permissions,omitempty"`
	Policies                []*service.ResourcePolicy       `protobuf:"bytes,18,rep,name=Policies" json:"Policies,omitempty"`
	PoliciesContextEditable bool                            `protobuf:"varint,19,opt,name=PoliciesContextEditable" json:"PoliciesContextEditable,omitempty"`
}

func (m *ShareLink) Reset()                    { *m = ShareLink{} }
func (m *ShareLink) String() string            { return proto.CompactTextString(m) }
func (*ShareLink) ProtoMessage()               {}
func (*ShareLink) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *ShareLink) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ShareLink) GetLinkHash() string {
	if m != nil {
		return m.LinkHash
	}
	return ""
}

func (m *ShareLink) GetLinkUrl() string {
	if m != nil {
		return m.LinkUrl
	}
	return ""
}

func (m *ShareLink) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ShareLink) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ShareLink) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *ShareLink) GetUserLogin() string {
	if m != nil {
		return m.UserLogin
	}
	return ""
}

func (m *ShareLink) GetPasswordRequired() bool {
	if m != nil {
		return m.PasswordRequired
	}
	return false
}

func (m *ShareLink) GetAccessStart() int64 {
	if m != nil {
		return m.AccessStart
	}
	return 0
}

func (m *ShareLink) GetAccessEnd() int64 {
	if m != nil {
		return m.AccessEnd
	}
	return 0
}

func (m *ShareLink) GetMaxDownloads() int64 {
	if m != nil {
		return m.MaxDownloads
	}
	return 0
}

func (m *ShareLink) GetCurrentDownloads() int64 {
	if m != nil {
		return m.CurrentDownloads
	}
	return 0
}

func (m *ShareLink) GetViewTemplateName() string {
	if m != nil {
		return m.ViewTemplateName
	}
	return ""
}

func (m *ShareLink) GetTargetUsers() map[string]*ShareLinkTargetUser {
	if m != nil {
		return m.TargetUsers
	}
	return nil
}

func (m *ShareLink) GetRestrictToTargetUsers() bool {
	if m != nil {
		return m.RestrictToTargetUsers
	}
	return false
}

func (m *ShareLink) GetRootNodes() []*tree.Node {
	if m != nil {
		return m.RootNodes
	}
	return nil
}

func (m *ShareLink) GetPermissions() []ShareLinkAccessType {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *ShareLink) GetPolicies() []*service.ResourcePolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ShareLink) GetPoliciesContextEditable() bool {
	if m != nil {
		return m.PoliciesContextEditable
	}
	return false
}

type PutCellRequest struct {
	Room            *Cell `protobuf:"bytes,1,opt,name=Room" json:"Room,omitempty"`
	CreateEmptyRoot bool  `protobuf:"varint,2,opt,name=CreateEmptyRoot" json:"CreateEmptyRoot,omitempty"`
}

func (m *PutCellRequest) Reset()                    { *m = PutCellRequest{} }
func (m *PutCellRequest) String() string            { return proto.CompactTextString(m) }
func (*PutCellRequest) ProtoMessage()               {}
func (*PutCellRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *PutCellRequest) GetRoom() *Cell {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *PutCellRequest) GetCreateEmptyRoot() bool {
	if m != nil {
		return m.CreateEmptyRoot
	}
	return false
}

type GetCellRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
}

func (m *GetCellRequest) Reset()                    { *m = GetCellRequest{} }
func (m *GetCellRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCellRequest) ProtoMessage()               {}
func (*GetCellRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *GetCellRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type DeleteCellRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
}

func (m *DeleteCellRequest) Reset()                    { *m = DeleteCellRequest{} }
func (m *DeleteCellRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCellRequest) ProtoMessage()               {}
func (*DeleteCellRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *DeleteCellRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type DeleteCellResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *DeleteCellResponse) Reset()                    { *m = DeleteCellResponse{} }
func (m *DeleteCellResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteCellResponse) ProtoMessage()               {}
func (*DeleteCellResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *DeleteCellResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetShareLinkRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
}

func (m *GetShareLinkRequest) Reset()                    { *m = GetShareLinkRequest{} }
func (m *GetShareLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*GetShareLinkRequest) ProtoMessage()               {}
func (*GetShareLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *GetShareLinkRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type PutShareLinkRequest struct {
	ShareLink        *ShareLink `protobuf:"bytes,1,opt,name=ShareLink" json:"ShareLink,omitempty"`
	PasswordEnabled  bool       `protobuf:"varint,2,opt,name=PasswordEnabled" json:"PasswordEnabled,omitempty"`
	CreatePassword   string     `protobuf:"bytes,3,opt,name=CreatePassword" json:"CreatePassword,omitempty"`
	UpdatePassword   string     `protobuf:"bytes,4,opt,name=UpdatePassword" json:"UpdatePassword,omitempty"`
	UpdateCustomHash string     `protobuf:"bytes,5,opt,name=UpdateCustomHash" json:"UpdateCustomHash,omitempty"`
}

func (m *PutShareLinkRequest) Reset()                    { *m = PutShareLinkRequest{} }
func (m *PutShareLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*PutShareLinkRequest) ProtoMessage()               {}
func (*PutShareLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *PutShareLinkRequest) GetShareLink() *ShareLink {
	if m != nil {
		return m.ShareLink
	}
	return nil
}

func (m *PutShareLinkRequest) GetPasswordEnabled() bool {
	if m != nil {
		return m.PasswordEnabled
	}
	return false
}

func (m *PutShareLinkRequest) GetCreatePassword() string {
	if m != nil {
		return m.CreatePassword
	}
	return ""
}

func (m *PutShareLinkRequest) GetUpdatePassword() string {
	if m != nil {
		return m.UpdatePassword
	}
	return ""
}

func (m *PutShareLinkRequest) GetUpdateCustomHash() string {
	if m != nil {
		return m.UpdateCustomHash
	}
	return ""
}

type DeleteShareLinkRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
}

func (m *DeleteShareLinkRequest) Reset()                    { *m = DeleteShareLinkRequest{} }
func (m *DeleteShareLinkRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteShareLinkRequest) ProtoMessage()               {}
func (*DeleteShareLinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *DeleteShareLinkRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type DeleteShareLinkResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *DeleteShareLinkResponse) Reset()                    { *m = DeleteShareLinkResponse{} }
func (m *DeleteShareLinkResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteShareLinkResponse) ProtoMessage()               {}
func (*DeleteShareLinkResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

func (m *DeleteShareLinkResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type ListSharedResourcesRequest struct {
	// Filter output to a given type
	ShareType ListSharedResourcesRequest_ListShareType `protobuf:"varint,1,opt,name=ShareType,enum=rest.ListSharedResourcesRequest_ListShareType" json:"ShareType,omitempty"`
	// Will restrict the list to the shares readable by a specific subject.
	// In user-context, current user is used by default. In admin-context, this can
	// be any resource policy subject
	Subject string `protobuf:"bytes,3,opt,name=Subject" json:"Subject,omitempty"`
	// If true, will also check filter the output to shares actually owned by subject
	OwnedBySubject bool  `protobuf:"varint,4,opt,name=OwnedBySubject" json:"OwnedBySubject,omitempty"`
	Offset         int32 `protobuf:"varint,5,opt,name=Offset" json:"Offset,omitempty"`
	Limit          int32 `protobuf:"varint,6,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *ListSharedResourcesRequest) Reset()                    { *m = ListSharedResourcesRequest{} }
func (m *ListSharedResourcesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSharedResourcesRequest) ProtoMessage()               {}
func (*ListSharedResourcesRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *ListSharedResourcesRequest) GetShareType() ListSharedResourcesRequest_ListShareType {
	if m != nil {
		return m.ShareType
	}
	return ListSharedResourcesRequest_ANY
}

func (m *ListSharedResourcesRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ListSharedResourcesRequest) GetOwnedBySubject() bool {
	if m != nil {
		return m.OwnedBySubject
	}
	return false
}

func (m *ListSharedResourcesRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListSharedResourcesRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListSharedResourcesResponse struct {
	// Actual results
	Resources []*ListSharedResourcesResponse_SharedResource `protobuf:"bytes,1,rep,name=Resources" json:"Resources,omitempty"`
	// Cursor informations
	Offset int32 `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
	Total  int32 `protobuf:"varint,4,opt,name=Total" json:"Total,omitempty"`
}

func (m *ListSharedResourcesResponse) Reset()                    { *m = ListSharedResourcesResponse{} }
func (m *ListSharedResourcesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSharedResourcesResponse) ProtoMessage()               {}
func (*ListSharedResourcesResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *ListSharedResourcesResponse) GetResources() []*ListSharedResourcesResponse_SharedResource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ListSharedResourcesResponse) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListSharedResourcesResponse) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListSharedResourcesResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Container for ShareLink or Cell
type ListSharedResourcesResponse_SharedResource struct {
	Node  *tree.Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	Link  *ShareLink `protobuf:"bytes,2,opt,name=Link" json:"Link,omitempty"`
	Cells []*Cell    `protobuf:"bytes,3,rep,name=Cells" json:"Cells,omitempty"`
}

func (m *ListSharedResourcesResponse_SharedResource) Reset() {
	*m = ListSharedResourcesResponse_SharedResource{}
}
func (m *ListSharedResourcesResponse_SharedResource) String() string {
	return proto.CompactTextString(m)
}
func (*ListSharedResourcesResponse_SharedResource) ProtoMessage() {}
func (*ListSharedResourcesResponse_SharedResource) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{13, 0}
}

func (m *ListSharedResourcesResponse_SharedResource) GetNode() *tree.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ListSharedResourcesResponse_SharedResource) GetLink() *ShareLink {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *ListSharedResourcesResponse_SharedResource) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type UpdateSharePoliciesRequest struct {
	Uuid     string                    `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Policies []*service.ResourcePolicy `protobuf:"bytes,2,rep,name=Policies" json:"Policies,omitempty"`
}

func (m *UpdateSharePoliciesRequest) Reset()                    { *m = UpdateSharePoliciesRequest{} }
func (m *UpdateSharePoliciesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSharePoliciesRequest) ProtoMessage()               {}
func (*UpdateSharePoliciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *UpdateSharePoliciesRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UpdateSharePoliciesRequest) GetPolicies() []*service.ResourcePolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type UpdateSharePoliciesResponse struct {
	Success                 bool                      `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Policies                []*service.ResourcePolicy `protobuf:"bytes,2,rep,name=Policies" json:"Policies,omitempty"`
	PoliciesContextEditable bool                      `protobuf:"varint,3,opt,name=PoliciesContextEditable" json:"PoliciesContextEditable,omitempty"`
}

func (m *UpdateSharePoliciesResponse) Reset()                    { *m = UpdateSharePoliciesResponse{} }
func (m *UpdateSharePoliciesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateSharePoliciesResponse) ProtoMessage()               {}
func (*UpdateSharePoliciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

func (m *UpdateSharePoliciesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateSharePoliciesResponse) GetPolicies() []*service.ResourcePolicy {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *UpdateSharePoliciesResponse) GetPoliciesContextEditable() bool {
	if m != nil {
		return m.PoliciesContextEditable
	}
	return false
}

func init() {
	proto.RegisterType((*CellAcl)(nil), "rest.CellAcl")
	proto.RegisterType((*Cell)(nil), "rest.Cell")
	proto.RegisterType((*ShareLinkTargetUser)(nil), "rest.ShareLinkTargetUser")
	proto.RegisterType((*ShareLink)(nil), "rest.ShareLink")
	proto.RegisterType((*PutCellRequest)(nil), "rest.PutCellRequest")
	proto.RegisterType((*GetCellRequest)(nil), "rest.GetCellRequest")
	proto.RegisterType((*DeleteCellRequest)(nil), "rest.DeleteCellRequest")
	proto.RegisterType((*DeleteCellResponse)(nil), "rest.DeleteCellResponse")
	proto.RegisterType((*GetShareLinkRequest)(nil), "rest.GetShareLinkRequest")
	proto.RegisterType((*PutShareLinkRequest)(nil), "rest.PutShareLinkRequest")
	proto.RegisterType((*DeleteShareLinkRequest)(nil), "rest.DeleteShareLinkRequest")
	proto.RegisterType((*DeleteShareLinkResponse)(nil), "rest.DeleteShareLinkResponse")
	proto.RegisterType((*ListSharedResourcesRequest)(nil), "rest.ListSharedResourcesRequest")
	proto.RegisterType((*ListSharedResourcesResponse)(nil), "rest.ListSharedResourcesResponse")
	proto.RegisterType((*ListSharedResourcesResponse_SharedResource)(nil), "rest.ListSharedResourcesResponse.SharedResource")
	proto.RegisterType((*UpdateSharePoliciesRequest)(nil), "rest.UpdateSharePoliciesRequest")
	proto.RegisterType((*UpdateSharePoliciesResponse)(nil), "rest.UpdateSharePoliciesResponse")
	proto.RegisterEnum("rest.ShareLinkAccessType", ShareLinkAccessType_name, ShareLinkAccessType_value)
	proto.RegisterEnum("rest.ListSharedResourcesRequest_ListShareType", ListSharedResourcesRequest_ListShareType_name, ListSharedResourcesRequest_ListShareType_value)
}

func init() { proto.RegisterFile("share.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 1197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x92, 0xdb, 0x44,
	0x10, 0x8e, 0x6c, 0xcb, 0x6b, 0xb7, 0xb3, 0x5e, 0x67, 0x36, 0x24, 0xc2, 0x81, 0xe0, 0x52, 0x52,
	0x60, 0x52, 0x20, 0xc3, 0x2e, 0x0f, 0x29, 0x78, 0x72, 0xbc, 0x26, 0x04, 0x8c, 0xe3, 0x9a, 0x5d,
	0x53, 0x15, 0xde, 0xb4, 0xd2, 0x24, 0x11, 0x91, 0x35, 0x46, 0x33, 0x8a, 0xe3, 0x2b, 0x70, 0x10,
	0x1e, 0x38, 0x0a, 0x47, 0xa0, 0x8a, 0x0b, 0x70, 0x0a, 0x6a, 0x7a, 0x24, 0x4b, 0xfe, 0x89, 0xb3,
	0x45, 0xf1, 0xb0, 0x5b, 0xd3, 0x5f, 0x77, 0xcf, 0x4c, 0x7f, 0x3d, 0xfd, 0xc9, 0xd0, 0x10, 0x2f,
	0xdd, 0x98, 0x39, 0xf3, 0x98, 0x4b, 0x4e, 0x2a, 0x31, 0x13, 0xb2, 0xfd, 0xf0, 0x45, 0x20, 0x5f,
	0x26, 0x97, 0x8e, 0xc7, 0x67, 0xbd, 0xf9, 0xd2, 0x0f, 0x78, 0xcf, 0x63, 0x61, 0x28, 0x7a, 0x1e,
	0x9f, 0xcd, 0x78, 0xd4, 0x13, 0x2c, 0x7e, 0x1d, 0x78, 0xac, 0x87, 0x29, 0x29, 0xa8, 0xf3, 0xdb,
	0x5f, 0xee, 0xcf, 0xd4, 0x19, 0x81, 0x3f, 0x53, 0x7f, 0x69, 0xca, 0xe9, 0x55, 0x52, 0x64, 0xcc,
	0x18, 0xfe, 0xd3, 0x49, 0xf6, 0x9f, 0x06, 0x1c, 0x0c, 0x58, 0x18, 0xf6, 0xbd, 0x90, 0xdc, 0x82,
	0x2a, 0xe5, 0x21, 0x7b, 0xe2, 0x5b, 0x46, 0xc7, 0xe8, 0xd6, 0x69, 0x6a, 0x91, 0x2e, 0x1c, 0xf4,
	0x3d, 0x19, 0xf0, 0x48, 0x58, 0xa5, 0x4e, 0xb9, 0xdb, 0x38, 0x69, 0x3a, 0xea, 0xd4, 0xfe, 0x60,
	0xa4, 0x61, 0x9a, 0xb9, 0xc9, 0x5d, 0x80, 0x27, 0x62, 0x2a, 0x58, 0xac, 0x32, 0xad, 0x72, 0xc7,
	0xe8, 0xd6, 0x68, 0x01, 0x21, 0x1f, 0x42, 0x45, 0xad, 0xad, 0x4a, 0xc7, 0xe8, 0x36, 0x4e, 0xea,
	0xb8, 0x0d, 0x3a, 0x11, 0x26, 0x1f, 0x81, 0xf9, 0x38, 0xe6, 0xc9, 0xdc, 0x32, 0x37, 0xfd, 0x1a,
	0x57, 0xf9, 0xb8, 0x73, 0xb5, 0xe0, 0x57, 0x00, 0x45, 0xd8, 0xfe, 0xbb, 0x04, 0x15, 0x55, 0x0c,
	0x21, 0x50, 0x99, 0x26, 0x41, 0x56, 0x07, 0xae, 0xc9, 0x4d, 0x30, 0x47, 0xee, 0x25, 0x0b, 0xad,
	0x12, 0x82, 0xda, 0x20, 0x1d, 0x68, 0x9c, 0x31, 0xe1, 0xc5, 0xc1, 0x5c, 0x55, 0x80, 0x57, 0xae,
	0xd3, 0x22, 0x44, 0xba, 0x50, 0xa7, 0x9c, 0xcb, 0x31, 0xf7, 0x99, 0xb0, 0x2a, 0x58, 0x3f, 0x38,
	0xc8, 0xa0, 0x82, 0x68, 0xee, 0x24, 0x5d, 0xa8, 0xf4, 0x07, 0x23, 0x61, 0x99, 0x18, 0x74, 0xd3,
	0x51, 0x4f, 0xc0, 0x51, 0xf7, 0x51, 0x54, 0x89, 0x61, 0x24, 0xe3, 0x25, 0xc5, 0x08, 0x72, 0x0a,
	0xb5, 0x09, 0x0f, 0x03, 0x2f, 0x60, 0xc2, 0xaa, 0x62, 0xf4, 0x6d, 0x27, 0x7d, 0x0c, 0x0e, 0x65,
	0x82, 0x27, 0xb1, 0xc7, 0x30, 0x60, 0x49, 0x57, 0x81, 0xe4, 0x21, 0xdc, 0xce, 0xd6, 0x03, 0x1e,
	0x49, 0xf6, 0x46, 0x0e, 0xfd, 0x40, 0xba, 0x97, 0x21, 0xb3, 0x0e, 0x90, 0xe9, 0xb7, 0xb9, 0xdb,
	0xdf, 0x42, 0x7d, 0x75, 0x03, 0xd2, 0x82, 0xf2, 0x2b, 0xb6, 0x4c, 0xa9, 0x51, 0x4b, 0x72, 0x0f,
	0xcc, 0xd7, 0x6e, 0x98, 0x30, 0x64, 0xa6, 0x71, 0x72, 0x98, 0x5f, 0xbc, 0xef, 0x85, 0x54, 0xfb,
	0xbe, 0x2e, 0x3d, 0x34, 0xec, 0x29, 0x1c, 0x9f, 0xab, 0x37, 0x3e, 0x0a, 0xa2, 0x57, 0x17, 0x6e,
	0xfc, 0x82, 0x49, 0x6c, 0x9b, 0x05, 0x07, 0x67, 0x81, 0x98, 0x87, 0x6e, 0xb6, 0x6b, 0x66, 0x92,
	0xfb, 0x70, 0x78, 0xc6, 0x17, 0x51, 0xc8, 0x5d, 0x7f, 0xc0, 0x93, 0x48, 0xe2, 0x09, 0x26, 0x5d,
	0x07, 0xed, 0xbf, 0xaa, 0x50, 0x5f, 0xed, 0xbb, 0xb3, 0x77, 0x6d, 0xa8, 0x29, 0xdf, 0x77, 0xae,
	0x78, 0x99, 0xb6, 0x6f, 0x65, 0xab, 0xd3, 0xd5, 0x7a, 0x1a, 0x87, 0x69, 0xf7, 0x32, 0x33, 0xef,
	0x78, 0x65, 0x4f, 0xc7, 0xcd, 0xed, 0x8e, 0xb7, 0xa1, 0xa6, 0xea, 0xc2, 0x5b, 0x54, 0xf5, 0x69,
	0x99, 0x4d, 0x3e, 0x80, 0xba, 0x5a, 0x8f, 0xf8, 0x8b, 0x20, 0x42, 0xda, 0xeb, 0x34, 0x07, 0xc8,
	0x03, 0x68, 0x4d, 0x5c, 0x21, 0x16, 0x3c, 0xf6, 0x29, 0xfb, 0x35, 0x09, 0x62, 0xe6, 0x5b, 0x35,
	0xec, 0xcd, 0x16, 0xae, 0xee, 0xd1, 0xf7, 0x3c, 0x26, 0xc4, 0xb9, 0x74, 0x63, 0x69, 0xd5, 0x3b,
	0x46, 0xb7, 0x4c, 0x8b, 0x90, 0x3a, 0x4b, 0x9b, 0xc3, 0xc8, 0xb7, 0x00, 0xfd, 0x39, 0x40, 0x6c,
	0xb8, 0xfe, 0xa3, 0xfb, 0x26, 0x63, 0x52, 0x58, 0x0d, 0x0c, 0x58, 0xc3, 0xd4, 0x7d, 0x06, 0x49,
	0x1c, 0xb3, 0x48, 0xe6, 0x71, 0xd7, 0x31, 0x6e, 0x0b, 0x57, 0xb1, 0x3f, 0x05, 0x6c, 0x71, 0xc1,
	0x66, 0xf3, 0xd0, 0x95, 0x6c, 0xec, 0xce, 0x98, 0x75, 0x88, 0x05, 0x6e, 0xe1, 0xe4, 0x11, 0x34,
	0xf2, 0xfe, 0x0b, 0xab, 0x89, 0x4f, 0xb8, 0xa3, 0xdf, 0xcd, 0xaa, 0x93, 0x4e, 0x21, 0x44, 0x3f,
	0xfe, 0x62, 0x12, 0xf9, 0x0a, 0xde, 0xa3, 0x4c, 0xc8, 0x38, 0xf0, 0xe4, 0x05, 0x2f, 0xee, 0x76,
	0x84, 0x84, 0xed, 0x76, 0xae, 0x4f, 0x63, 0x6b, 0xdf, 0x34, 0x7e, 0x03, 0x8d, 0x09, 0x8b, 0x67,
	0x81, 0x10, 0xa8, 0x5c, 0x37, 0x3a, 0xe5, 0x6e, 0xf3, 0xe4, 0xfd, 0x8d, 0x3b, 0x6a, 0x3a, 0x2f,
	0x96, 0x73, 0x46, 0x8b, 0xd1, 0x6b, 0x03, 0x4a, 0xfe, 0x87, 0x01, 0x3d, 0xde, 0x3f, 0xa0, 0xcf,
	0xa0, 0xb5, 0x49, 0xd6, 0x8e, 0x39, 0xed, 0xad, 0xcf, 0xe9, 0x66, 0x2d, 0xf9, 0x0e, 0xc5, 0x99,
	0xfd, 0x19, 0x9a, 0x93, 0x44, 0xaa, 0x61, 0x56, 0x2f, 0x8f, 0x09, 0x49, 0xee, 0x2a, 0x11, 0xe5,
	0x33, 0xdc, 0x59, 0xb1, 0xb7, 0x9a, 0x76, 0x8a, 0x38, 0xe9, 0xc2, 0xd1, 0x20, 0x66, 0xae, 0x64,
	0xc3, 0xd9, 0x5c, 0x2e, 0x15, 0xa1, 0x78, 0x60, 0x8d, 0x6e, 0xc2, 0xf6, 0x7d, 0x68, 0x3e, 0x66,
	0x6b, 0x7b, 0xef, 0x18, 0x5e, 0xfb, 0x13, 0xb8, 0x71, 0xc6, 0x42, 0x26, 0xd9, 0xbb, 0x02, 0x1d,
	0x20, 0xc5, 0x40, 0x31, 0xe7, 0x91, 0x60, 0x6a, 0xbe, 0xcf, 0x13, 0x6c, 0x13, 0x06, 0xd7, 0x68,
	0x66, 0xda, 0x9f, 0xc2, 0xf1, 0x63, 0x26, 0x57, 0xf5, 0xef, 0xdb, 0xfa, 0x1f, 0x03, 0x8e, 0x27,
	0xc9, 0x76, 0xec, 0xe7, 0x05, 0xe5, 0x49, 0x09, 0x39, 0xda, 0xa0, 0x95, 0x16, 0xb4, 0xa9, 0x0b,
	0x47, 0xd9, 0x1c, 0x0f, 0x23, 0xd5, 0x39, 0x3f, 0xa3, 0x66, 0x03, 0x26, 0x1f, 0x43, 0x53, 0xb3,
	0x95, 0x39, 0x52, 0x71, 0xda, 0x40, 0x55, 0xdc, 0x74, 0xee, 0x17, 0xe3, 0xb4, 0x58, 0x6d, 0xa0,
	0x6a, 0x3a, 0x35, 0x32, 0x48, 0x84, 0xe4, 0x33, 0x54, 0x42, 0x2d, 0x5d, 0x5b, 0xb8, 0xfd, 0x19,
	0xdc, 0xd2, 0x3c, 0x5e, 0x89, 0x9a, 0x53, 0xb8, 0xbd, 0x15, 0xfd, 0x4e, 0xea, 0x7f, 0x2b, 0x41,
	0x7b, 0x14, 0x08, 0x4d, 0xa8, 0x9f, 0x4d, 0x84, 0xc8, 0xce, 0x19, 0xa5, 0xb4, 0xaa, 0xc1, 0xc2,
	0xd4, 0xe6, 0x89, 0xa3, 0x69, 0x7d, 0x7b, 0x52, 0xee, 0xc2, 0x71, 0xcc, 0x37, 0xd0, 0xd7, 0xb8,
	0xfc, 0x85, 0x79, 0x32, 0x53, 0xf8, 0xd4, 0x54, 0xec, 0x3d, 0x5d, 0x44, 0xcc, 0x7f, 0xb4, 0xcc,
	0x02, 0x2a, 0x78, 0xcf, 0x0d, 0x54, 0xfd, 0xb2, 0x79, 0xfa, 0xfc, 0xb9, 0x60, 0x12, 0x39, 0x33,
	0x69, 0x6a, 0xe1, 0x17, 0x22, 0x98, 0x05, 0x12, 0x65, 0xde, 0xa4, 0xda, 0xb0, 0x1d, 0x38, 0x5c,
	0xbb, 0x0b, 0x39, 0x80, 0x72, 0x7f, 0xfc, 0xac, 0x75, 0x8d, 0xd4, 0xc1, 0x1c, 0x3d, 0x19, 0xff,
	0x70, 0xde, 0x32, 0xd4, 0x72, 0x30, 0x1c, 0x8d, 0xce, 0x5b, 0x25, 0xfb, 0x8f, 0x12, 0xdc, 0xd9,
	0x59, 0x57, 0x4a, 0xe3, 0x18, 0xea, 0x2b, 0xd0, 0x32, 0x50, 0x4d, 0xbe, 0xd8, 0xc3, 0x86, 0xce,
	0x72, 0xd6, 0x71, 0x9a, 0x6f, 0x51, 0xa8, 0xa6, 0xb4, 0xbb, 0x9a, 0x72, 0xa1, 0x1a, 0x85, 0x5e,
	0x70, 0xe9, 0xea, 0xaf, 0xa0, 0x49, 0xb5, 0xd1, 0x5e, 0x40, 0x73, 0xfd, 0x00, 0x25, 0x0b, 0x4a,
	0x38, 0x57, 0xb2, 0x90, 0x8b, 0x2a, 0xe2, 0xe4, 0x1e, 0x54, 0x70, 0x4a, 0x4a, 0xbb, 0xa7, 0x04,
	0x9d, 0xa4, 0x03, 0xa6, 0x1a, 0x5e, 0x61, 0x95, 0x53, 0x69, 0xce, 0xc5, 0x45, 0x3b, 0x6c, 0x06,
	0x6d, 0xfd, 0x60, 0x31, 0x35, 0x13, 0xc4, 0x3d, 0x0f, 0x74, 0x4d, 0x8b, 0x4b, 0x57, 0xd4, 0x62,
	0xfb, 0x77, 0x03, 0xee, 0xec, 0x3c, 0xe7, 0x5d, 0x4f, 0xfb, 0x3f, 0x1d, 0xb7, 0x4f, 0xfa, 0xcb,
	0x7b, 0xa5, 0xff, 0xc1, 0xf7, 0x85, 0xdf, 0x54, 0xf9, 0xd7, 0x88, 0x5c, 0x87, 0xda, 0x98, 0x6b,
	0xbb, 0x75, 0x8d, 0x34, 0xe0, 0x60, 0x12, 0xb3, 0xd7, 0x01, 0x5b, 0xb4, 0x0c, 0xe5, 0xca, 0xbe,
	0xda, 0xad, 0x12, 0x01, 0xa8, 0x4e, 0xe7, 0xb8, 0x2e, 0x5f, 0x56, 0xf1, 0x37, 0xfd, 0xe9, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x31, 0x86, 0x73, 0x8a, 0x0c, 0x00, 0x00,
}
