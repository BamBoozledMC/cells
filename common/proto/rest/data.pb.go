// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package rest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tree "github.com/pydio/cells/common/proto/tree"
import docstore "github.com/pydio/cells/common/proto/docstore"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SearchResults struct {
	Results []*tree.Node        `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
	Facets  []*tree.SearchFacet `protobuf:"bytes,3,rep,name=Facets" json:"Facets,omitempty"`
	Total   int32               `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
}

func (m *SearchResults) Reset()                    { *m = SearchResults{} }
func (m *SearchResults) String() string            { return proto.CompactTextString(m) }
func (*SearchResults) ProtoMessage()               {}
func (*SearchResults) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SearchResults) GetResults() []*tree.Node {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SearchResults) GetFacets() []*tree.SearchFacet {
	if m != nil {
		return m.Facets
	}
	return nil
}

func (m *SearchResults) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Generic container for responses sending pagination information
type Pagination struct {
	// Current Limit parameter, either passed by request or default value
	Limit int32 `protobuf:"varint,1,opt,name=Limit" json:"Limit,omitempty"`
	// Current Offset value
	CurrentOffset int32 `protobuf:"varint,2,opt,name=CurrentOffset" json:"CurrentOffset,omitempty"`
	// Total number of records
	Total int32 `protobuf:"varint,3,opt,name=Total" json:"Total,omitempty"`
	// Current number of Page
	CurrentPage int32 `protobuf:"varint,4,opt,name=CurrentPage" json:"CurrentPage,omitempty"`
	// Number of detected pages
	TotalPages int32 `protobuf:"varint,5,opt,name=TotalPages" json:"TotalPages,omitempty"`
	// Offset value for next page if there is one
	NextOffset int32 `protobuf:"varint,6,opt,name=NextOffset" json:"NextOffset,omitempty"`
	// Offset value for previous page, if there is one
	PrevOffset int32 `protobuf:"varint,7,opt,name=PrevOffset" json:"PrevOffset,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Pagination) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return 0
}

func (m *Pagination) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Pagination) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *Pagination) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *Pagination) GetNextOffset() int32 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

func (m *Pagination) GetPrevOffset() int32 {
	if m != nil {
		return m.PrevOffset
	}
	return 0
}

type Metadata struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	JsonMeta  string `protobuf:"bytes,2,opt,name=JsonMeta" json:"JsonMeta,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Metadata) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Metadata) GetJsonMeta() string {
	if m != nil {
		return m.JsonMeta
	}
	return ""
}

type MetaCollection struct {
	NodePath  string      `protobuf:"bytes,1,opt,name=NodePath" json:"NodePath,omitempty"`
	Metadatas []*Metadata `protobuf:"bytes,2,rep,name=Metadatas" json:"Metadatas,omitempty"`
}

func (m *MetaCollection) Reset()                    { *m = MetaCollection{} }
func (m *MetaCollection) String() string            { return proto.CompactTextString(m) }
func (*MetaCollection) ProtoMessage()               {}
func (*MetaCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *MetaCollection) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *MetaCollection) GetMetadatas() []*Metadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type MetaNamespaceRequest struct {
	// Path to the requested node
	NodePath string `protobuf:"bytes,1,opt,name=NodePath" json:"NodePath,omitempty"`
	// List of namespaces to load
	Namespace []string `protobuf:"bytes,2,rep,name=Namespace" json:"Namespace,omitempty"`
}

func (m *MetaNamespaceRequest) Reset()                    { *m = MetaNamespaceRequest{} }
func (m *MetaNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*MetaNamespaceRequest) ProtoMessage()               {}
func (*MetaNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *MetaNamespaceRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *MetaNamespaceRequest) GetNamespace() []string {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type GetBulkMetaRequest struct {
	// List of node paths to query (use paths ending with /* to load the children)
	NodePaths []string `protobuf:"bytes,1,rep,name=NodePaths" json:"NodePaths,omitempty"`
	// List of nodes based on their Uuids
	NodeUuids []string `protobuf:"bytes,2,rep,name=NodeUuids" json:"NodeUuids,omitempty"`
	// Whether to query all services for the metadata they can contribute to enrich the node
	AllMetaProviders bool `protobuf:"varint,3,opt,name=AllMetaProviders" json:"AllMetaProviders,omitempty"`
	// Load Versions of the given node
	Versions bool `protobuf:"varint,4,opt,name=Versions" json:"Versions,omitempty"`
	// Start listing at a given position
	Offset int32 `protobuf:"varint,5,opt,name=Offset" json:"Offset,omitempty"`
	// Limit number of results
	Limit int32 `protobuf:"varint,6,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *GetBulkMetaRequest) Reset()                    { *m = GetBulkMetaRequest{} }
func (m *GetBulkMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBulkMetaRequest) ProtoMessage()               {}
func (*GetBulkMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *GetBulkMetaRequest) GetNodePaths() []string {
	if m != nil {
		return m.NodePaths
	}
	return nil
}

func (m *GetBulkMetaRequest) GetNodeUuids() []string {
	if m != nil {
		return m.NodeUuids
	}
	return nil
}

func (m *GetBulkMetaRequest) GetAllMetaProviders() bool {
	if m != nil {
		return m.AllMetaProviders
	}
	return false
}

func (m *GetBulkMetaRequest) GetVersions() bool {
	if m != nil {
		return m.Versions
	}
	return false
}

func (m *GetBulkMetaRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetBulkMetaRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type BulkMetaResponse struct {
	Nodes      []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	Pagination *Pagination  `protobuf:"bytes,5,opt,name=Pagination" json:"Pagination,omitempty"`
}

func (m *BulkMetaResponse) Reset()                    { *m = BulkMetaResponse{} }
func (m *BulkMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*BulkMetaResponse) ProtoMessage()               {}
func (*BulkMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BulkMetaResponse) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *BulkMetaResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type HeadNodeRequest struct {
	// The node to state
	Node string `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *HeadNodeRequest) Reset()                    { *m = HeadNodeRequest{} }
func (m *HeadNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*HeadNodeRequest) ProtoMessage()               {}
func (*HeadNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *HeadNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type HeadNodeResponse struct {
	Node *tree.Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *HeadNodeResponse) Reset()                    { *m = HeadNodeResponse{} }
func (m *HeadNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*HeadNodeResponse) ProtoMessage()               {}
func (*HeadNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *HeadNodeResponse) GetNode() *tree.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CreateNodesRequest struct {
	// A list of nodes that must be created
	Nodes []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	// If nodes are created inside non-existing folders, whether the parents should be created automatically or not
	Recursive bool `protobuf:"varint,2,opt,name=Recursive" json:"Recursive,omitempty"`
	// Use a template to create this node
	TemplateUUID string `protobuf:"bytes,3,opt,name=TemplateUUID" json:"TemplateUUID,omitempty"`
}

func (m *CreateNodesRequest) Reset()                    { *m = CreateNodesRequest{} }
func (m *CreateNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodesRequest) ProtoMessage()               {}
func (*CreateNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *CreateNodesRequest) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CreateNodesRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *CreateNodesRequest) GetTemplateUUID() string {
	if m != nil {
		return m.TemplateUUID
	}
	return ""
}

type CreateSelectionRequest struct {
	// Create a temporary selection out of this list of nodes
	Nodes []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	// Associated target action for this selection
	TargetAction string `protobuf:"bytes,2,opt,name=TargetAction" json:"TargetAction,omitempty"`
	// Whether to save the selection or just get a temporary Uuid in return
	Persist bool `protobuf:"varint,3,opt,name=Persist" json:"Persist,omitempty"`
}

func (m *CreateSelectionRequest) Reset()                    { *m = CreateSelectionRequest{} }
func (m *CreateSelectionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSelectionRequest) ProtoMessage()               {}
func (*CreateSelectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *CreateSelectionRequest) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CreateSelectionRequest) GetTargetAction() string {
	if m != nil {
		return m.TargetAction
	}
	return ""
}

func (m *CreateSelectionRequest) GetPersist() bool {
	if m != nil {
		return m.Persist
	}
	return false
}

type CreateSelectionResponse struct {
	SelectionUUID string       `protobuf:"bytes,1,opt,name=SelectionUUID" json:"SelectionUUID,omitempty"`
	Nodes         []*tree.Node `protobuf:"bytes,2,rep,name=Nodes" json:"Nodes,omitempty"`
}

func (m *CreateSelectionResponse) Reset()                    { *m = CreateSelectionResponse{} }
func (m *CreateSelectionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSelectionResponse) ProtoMessage()               {}
func (*CreateSelectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *CreateSelectionResponse) GetSelectionUUID() string {
	if m != nil {
		return m.SelectionUUID
	}
	return ""
}

func (m *CreateSelectionResponse) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodesCollection struct {
	Parent   *tree.Node   `protobuf:"bytes,1,opt,name=Parent" json:"Parent,omitempty"`
	Children []*tree.Node `protobuf:"bytes,2,rep,name=Children" json:"Children,omitempty"`
}

func (m *NodesCollection) Reset()                    { *m = NodesCollection{} }
func (m *NodesCollection) String() string            { return proto.CompactTextString(m) }
func (*NodesCollection) ProtoMessage()               {}
func (*NodesCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *NodesCollection) GetParent() *tree.Node {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *NodesCollection) GetChildren() []*tree.Node {
	if m != nil {
		return m.Children
	}
	return nil
}

type DeleteNodesRequest struct {
	// List of nodes to delete
	Nodes []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	// Whether to delete all the children if node is a folder
	Recursive bool `protobuf:"varint,2,opt,name=Recursive" json:"Recursive,omitempty"`
}

func (m *DeleteNodesRequest) Reset()                    { *m = DeleteNodesRequest{} }
func (m *DeleteNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodesRequest) ProtoMessage()               {}
func (*DeleteNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *DeleteNodesRequest) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DeleteNodesRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

type BackgroundJobResult struct {
	Uuid     string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=Label" json:"Label,omitempty"`
	NodeUuid string `protobuf:"bytes,3,opt,name=NodeUuid" json:"NodeUuid,omitempty"`
}

func (m *BackgroundJobResult) Reset()                    { *m = BackgroundJobResult{} }
func (m *BackgroundJobResult) String() string            { return proto.CompactTextString(m) }
func (*BackgroundJobResult) ProtoMessage()               {}
func (*BackgroundJobResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *BackgroundJobResult) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *BackgroundJobResult) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *BackgroundJobResult) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

type DeleteNodesResponse struct {
	DeleteJobs []*BackgroundJobResult `protobuf:"bytes,1,rep,name=DeleteJobs" json:"DeleteJobs,omitempty"`
}

func (m *DeleteNodesResponse) Reset()                    { *m = DeleteNodesResponse{} }
func (m *DeleteNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodesResponse) ProtoMessage()               {}
func (*DeleteNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *DeleteNodesResponse) GetDeleteJobs() []*BackgroundJobResult {
	if m != nil {
		return m.DeleteJobs
	}
	return nil
}

type RestoreNodesRequest struct {
	// Restore this node from the recycle bin to its original location
	Nodes []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
}

func (m *RestoreNodesRequest) Reset()                    { *m = RestoreNodesRequest{} }
func (m *RestoreNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreNodesRequest) ProtoMessage()               {}
func (*RestoreNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *RestoreNodesRequest) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type RestoreNodesResponse struct {
	RestoreJobs []*BackgroundJobResult `protobuf:"bytes,1,rep,name=RestoreJobs" json:"RestoreJobs,omitempty"`
}

func (m *RestoreNodesResponse) Reset()                    { *m = RestoreNodesResponse{} }
func (m *RestoreNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*RestoreNodesResponse) ProtoMessage()               {}
func (*RestoreNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *RestoreNodesResponse) GetRestoreJobs() []*BackgroundJobResult {
	if m != nil {
		return m.RestoreJobs
	}
	return nil
}

type ListDocstoreRequest struct {
	// Id of the Store to list
	StoreID string `protobuf:"bytes,1,opt,name=StoreID" json:"StoreID,omitempty"`
	// Bleve-query for searching the store
	Query *docstore.DocumentQuery `protobuf:"bytes,2,opt,name=Query" json:"Query,omitempty"`
	// Return only the number of results, no actual documents
	CountOnly bool `protobuf:"varint,3,opt,name=CountOnly" json:"CountOnly,omitempty"`
}

func (m *ListDocstoreRequest) Reset()                    { *m = ListDocstoreRequest{} }
func (m *ListDocstoreRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDocstoreRequest) ProtoMessage()               {}
func (*ListDocstoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{18} }

func (m *ListDocstoreRequest) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *ListDocstoreRequest) GetQuery() *docstore.DocumentQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListDocstoreRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

type DocstoreCollection struct {
	Docs  []*docstore.Document `protobuf:"bytes,1,rep,name=Docs" json:"Docs,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
}

func (m *DocstoreCollection) Reset()                    { *m = DocstoreCollection{} }
func (m *DocstoreCollection) String() string            { return proto.CompactTextString(m) }
func (*DocstoreCollection) ProtoMessage()               {}
func (*DocstoreCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{19} }

func (m *DocstoreCollection) GetDocs() []*docstore.Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

func (m *DocstoreCollection) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*SearchResults)(nil), "rest.SearchResults")
	proto.RegisterType((*Pagination)(nil), "rest.Pagination")
	proto.RegisterType((*Metadata)(nil), "rest.Metadata")
	proto.RegisterType((*MetaCollection)(nil), "rest.MetaCollection")
	proto.RegisterType((*MetaNamespaceRequest)(nil), "rest.MetaNamespaceRequest")
	proto.RegisterType((*GetBulkMetaRequest)(nil), "rest.GetBulkMetaRequest")
	proto.RegisterType((*BulkMetaResponse)(nil), "rest.BulkMetaResponse")
	proto.RegisterType((*HeadNodeRequest)(nil), "rest.HeadNodeRequest")
	proto.RegisterType((*HeadNodeResponse)(nil), "rest.HeadNodeResponse")
	proto.RegisterType((*CreateNodesRequest)(nil), "rest.CreateNodesRequest")
	proto.RegisterType((*CreateSelectionRequest)(nil), "rest.CreateSelectionRequest")
	proto.RegisterType((*CreateSelectionResponse)(nil), "rest.CreateSelectionResponse")
	proto.RegisterType((*NodesCollection)(nil), "rest.NodesCollection")
	proto.RegisterType((*DeleteNodesRequest)(nil), "rest.DeleteNodesRequest")
	proto.RegisterType((*BackgroundJobResult)(nil), "rest.BackgroundJobResult")
	proto.RegisterType((*DeleteNodesResponse)(nil), "rest.DeleteNodesResponse")
	proto.RegisterType((*RestoreNodesRequest)(nil), "rest.RestoreNodesRequest")
	proto.RegisterType((*RestoreNodesResponse)(nil), "rest.RestoreNodesResponse")
	proto.RegisterType((*ListDocstoreRequest)(nil), "rest.ListDocstoreRequest")
	proto.RegisterType((*DocstoreCollection)(nil), "rest.DocstoreCollection")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdb, 0x6e, 0x1b, 0x37,
	0x10, 0x85, 0x2c, 0x4b, 0x96, 0x46, 0x4d, 0xe2, 0xd2, 0x46, 0xb2, 0x35, 0x82, 0xc0, 0x20, 0xdc,
	0x20, 0x2d, 0x5a, 0xa9, 0x70, 0x1e, 0x8a, 0x22, 0x4f, 0x89, 0x84, 0x5e, 0x8c, 0xd4, 0xd9, 0xd2,
	0x76, 0x1f, 0x5a, 0xf4, 0x81, 0xda, 0x1d, 0x4b, 0x8b, 0xac, 0x96, 0x2a, 0xc9, 0x15, 0x6c, 0xa0,
	0xdf, 0xd7, 0xef, 0xe8, 0xa7, 0x14, 0xbc, 0xed, 0x05, 0x56, 0x5b, 0x17, 0xc8, 0x8b, 0xb4, 0x73,
	0xe6, 0x70, 0xe6, 0x70, 0x66, 0x48, 0x02, 0xa4, 0x5c, 0xf3, 0xf1, 0x5a, 0x0a, 0x2d, 0xc8, 0xae,
	0x44, 0xa5, 0x8f, 0x5e, 0x2e, 0x32, 0xbd, 0x2c, 0xe7, 0xe3, 0x44, 0xac, 0x26, 0xeb, 0xdb, 0x34,
	0x13, 0x93, 0x04, 0xf3, 0x5c, 0x4d, 0x12, 0xb1, 0x5a, 0x89, 0x62, 0x62, 0xa9, 0x13, 0x2d, 0x11,
	0xed, 0x8f, 0x5b, 0x7a, 0xf4, 0xea, 0x3e, 0x8b, 0x52, 0x91, 0x28, 0x2d, 0x24, 0x56, 0x1f, 0x6e,
	0x31, 0xdd, 0xc0, 0x83, 0x0b, 0xe4, 0x32, 0x59, 0x32, 0x54, 0x65, 0xae, 0x15, 0x39, 0x81, 0x3d,
	0xff, 0x19, 0x75, 0x8e, 0xbb, 0x2f, 0x46, 0xa7, 0x30, 0xb6, 0xb9, 0xce, 0x45, 0x8a, 0x2c, 0xb8,
	0xc8, 0x67, 0xd0, 0xff, 0x96, 0x27, 0xa8, 0x55, 0xd4, 0xb5, 0xa4, 0x8f, 0x1d, 0xc9, 0x85, 0xb2,
	0x1e, 0xe6, 0x09, 0xe4, 0x10, 0x7a, 0x97, 0x42, 0xf3, 0x3c, 0xda, 0x39, 0xee, 0xbc, 0xe8, 0x31,
	0x67, 0xd0, 0xbf, 0x3a, 0x00, 0x31, 0x5f, 0x64, 0x05, 0xd7, 0x99, 0x28, 0x0c, 0xe9, 0x6d, 0xb6,
	0xca, 0x74, 0xd4, 0x71, 0x24, 0x6b, 0x90, 0x13, 0x78, 0x30, 0x2d, 0xa5, 0xc4, 0x42, 0xbf, 0xbb,
	0xbe, 0x56, 0xa8, 0x7d, 0x88, 0x36, 0x58, 0x27, 0xe8, 0x36, 0x12, 0x90, 0x63, 0x18, 0x79, 0x5a,
	0xcc, 0x17, 0x18, 0xed, 0x5a, 0x5f, 0x13, 0x22, 0xcf, 0x00, 0x2c, 0xd5, 0x18, 0x2a, 0xea, 0x59,
	0x42, 0x03, 0x31, 0xfe, 0x73, 0xbc, 0x09, 0xa9, 0xfb, 0xce, 0x5f, 0x23, 0xc6, 0x1f, 0x4b, 0xdc,
	0x78, 0xff, 0x9e, 0xf3, 0xd7, 0x08, 0x9d, 0xc1, 0xe0, 0x47, 0xd4, 0xdc, 0x34, 0x99, 0x3c, 0x85,
	0xe1, 0x39, 0x5f, 0xa1, 0x5a, 0xf3, 0x04, 0xed, 0x1e, 0x87, 0xac, 0x06, 0xc8, 0x11, 0x0c, 0xce,
	0x94, 0x28, 0x0c, 0xdb, 0x6e, 0x71, 0xc8, 0x2a, 0x9b, 0xfe, 0x02, 0x0f, 0xcd, 0xff, 0x54, 0xe4,
	0x39, 0x26, 0xb6, 0x56, 0x47, 0x30, 0x30, 0xcd, 0x88, 0xb9, 0x5e, 0xfa, 0x50, 0x95, 0x4d, 0xbe,
	0x80, 0x61, 0xc8, 0xa9, 0xa2, 0x1d, 0xdb, 0x9a, 0x87, 0x63, 0x33, 0x5a, 0xe3, 0x00, 0xb3, 0x9a,
	0x40, 0x63, 0x38, 0x34, 0x46, 0x25, 0x84, 0xe1, 0xef, 0x25, 0x2a, 0xfd, 0xaf, 0x19, 0x5a, 0x3b,
	0x31, 0x19, 0x9a, 0x3b, 0xa1, 0x7f, 0x76, 0x80, 0x7c, 0x87, 0xfa, 0x4d, 0x99, 0xbf, 0x37, 0x91,
	0x43, 0x40, 0xb3, 0xc8, 0x07, 0x70, 0x63, 0x65, 0x16, 0x05, 0x20, 0x78, 0xaf, 0xca, 0x2c, 0x55,
	0x55, 0xc8, 0x00, 0x90, 0xcf, 0x61, 0xff, 0x75, 0x9e, 0x9b, 0x68, 0xb1, 0x14, 0x9b, 0x2c, 0x45,
	0xa9, 0x6c, 0xa7, 0x07, 0xec, 0x0e, 0x6e, 0x84, 0xff, 0x8c, 0x52, 0x65, 0xa2, 0x50, 0xb6, 0xe3,
	0x03, 0x56, 0xd9, 0xe4, 0x31, 0xf4, 0x7d, 0xab, 0x5c, 0xab, 0xfb, 0xf5, 0xf8, 0xb8, 0xd1, 0xeb,
	0x37, 0x46, 0x8f, 0x5e, 0xc3, 0x7e, 0xbd, 0x09, 0xb5, 0x16, 0x85, 0x42, 0x72, 0x0c, 0x3d, 0x23,
	0x6b, 0xdb, 0xc1, 0x70, 0x0e, 0xf2, 0x55, 0x73, 0xa8, 0x6d, 0x9e, 0xd1, 0xe9, 0xbe, 0xab, 0x7f,
	0x8d, 0xb3, 0x06, 0x87, 0x7e, 0x0a, 0x8f, 0xbe, 0x47, 0x9e, 0xda, 0x20, 0xbe, 0x58, 0x04, 0x76,
	0x8d, 0xe9, 0x2b, 0x6f, 0xbf, 0xe9, 0x29, 0xec, 0xd7, 0x34, 0x2f, 0xe7, 0x59, 0x83, 0xd7, 0x56,
	0xe3, 0xd6, 0xdc, 0x00, 0x99, 0x4a, 0xe4, 0x1a, 0xad, 0xb6, 0x10, 0xfd, 0xbf, 0x37, 0xf1, 0x14,
	0x86, 0x0c, 0x93, 0x52, 0xaa, 0x6c, 0x83, 0x76, 0x1c, 0x07, 0xac, 0x06, 0x08, 0x85, 0x8f, 0x2e,
	0x71, 0xb5, 0xce, 0xb9, 0xc6, 0xab, 0xab, 0x1f, 0x66, 0xb6, 0x15, 0x43, 0xd6, 0xc2, 0xe8, 0x0d,
	0x3c, 0x76, 0x99, 0x2f, 0xd0, 0x0f, 0xed, 0xfd, 0xb3, 0x9b, 0xf8, 0x5c, 0x2e, 0x50, 0xbf, 0xb6,
	0x0b, 0xfd, 0x79, 0x68, 0x61, 0x24, 0x82, 0xbd, 0xd8, 0xb4, 0x55, 0x69, 0x3f, 0x09, 0xc1, 0xa4,
	0x1c, 0x9e, 0xdc, 0xc9, 0xec, 0xcb, 0x75, 0x62, 0x6e, 0x3a, 0x0f, 0x5a, 0xe5, 0xae, 0xbe, 0x6d,
	0xb0, 0x16, 0xb8, 0xf3, 0x0f, 0x02, 0xe9, 0x6f, 0xf0, 0xc8, 0x7e, 0x34, 0x4e, 0x24, 0x85, 0x7e,
	0xcc, 0xcd, 0xbd, 0xb2, 0xa5, 0x17, 0xde, 0x43, 0x9e, 0xc3, 0x60, 0xba, 0xcc, 0xf2, 0x54, 0x62,
	0xb1, 0x25, 0x76, 0xe5, 0xa3, 0x97, 0x40, 0x66, 0x98, 0xe3, 0x87, 0xed, 0x1a, 0xfd, 0x15, 0x0e,
	0xde, 0xf0, 0xe4, 0xfd, 0x42, 0x8a, 0xb2, 0x48, 0xcf, 0xc4, 0xdc, 0xdd, 0xe3, 0x66, 0xd4, 0xcc,
	0x21, 0x0b, 0xa3, 0x66, 0xbe, 0xed, 0x79, 0xe0, 0x73, 0xcc, 0x7d, 0xe5, 0x9d, 0x11, 0xae, 0x04,
	0xcb, 0xee, 0xd6, 0x57, 0x82, 0xb1, 0x69, 0x0c, 0x07, 0x2d, 0xc9, 0xbe, 0xe0, 0xdf, 0x00, 0x38,
	0xf8, 0x4c, 0xcc, 0x83, 0xf0, 0x4f, 0xdc, 0x61, 0xd8, 0xa2, 0x85, 0x35, 0xc8, 0xf4, 0x6b, 0x38,
	0x60, 0x68, 0x9f, 0xa9, 0xff, 0x57, 0x05, 0x7a, 0x01, 0x87, 0xed, 0x85, 0x5e, 0xcb, 0x2b, 0x18,
	0x79, 0xfc, 0x7e, 0x62, 0x9a, 0x6c, 0xfa, 0x07, 0x1c, 0xbc, 0xcd, 0x94, 0x9e, 0xf9, 0x97, 0x33,
	0xa8, 0x89, 0x60, 0xef, 0xc2, 0xd8, 0xd5, 0x28, 0x05, 0x93, 0x7c, 0x09, 0xbd, 0x9f, 0x4a, 0x94,
	0xb7, 0xb6, 0x84, 0xa3, 0xd3, 0x27, 0xe3, 0xea, 0xd1, 0x9d, 0x89, 0xa4, 0x5c, 0x61, 0xa1, 0xad,
	0x9b, 0x39, 0x96, 0x69, 0xdd, 0x54, 0x94, 0x85, 0x7e, 0x57, 0xe4, 0xb7, 0x7e, 0xa0, 0x6b, 0x80,
	0x32, 0x20, 0x21, 0x73, 0x63, 0xe4, 0x9e, 0xc3, 0xae, 0x41, 0xfd, 0x4e, 0xc8, 0xdd, 0x0c, 0xcc,
	0xfa, 0xdb, 0xaf, 0x6f, 0xd7, 0x3f, 0x8e, 0xf3, 0xbe, 0x7d, 0xfc, 0x5f, 0xfe, 0x1d, 0x00, 0x00,
	0xff, 0xff, 0x08, 0xc7, 0x2b, 0xe8, 0x82, 0x08, 0x00, 0x00,
}
