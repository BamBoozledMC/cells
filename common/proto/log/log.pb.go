// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

/*
Package log is a generated protocol buffer package.

It is generated from these files:
	log.proto

It has these top-level messages:
	RecorderPutResponse
	Log
	LogMessage
	ListLogRequest
	ListLogResponse
	DeleteLogsResponse
	TimeRangeResponse
	TimeRangeResult
	TimeRangeRequest
	TimeRangeCursor
*/
package log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Relative links types.
// Note that First is time.Now() and last time.Unix(0).
// We added an unused NONE enum with value 0 to workaround 0 issues between JSON and proto3.
type RelType int32

const (
	RelType_NONE  RelType = 0
	RelType_FIRST RelType = 1
	RelType_PREV  RelType = 2
	RelType_NEXT  RelType = 3
	RelType_LAST  RelType = 4
)

var RelType_name = map[int32]string{
	0: "NONE",
	1: "FIRST",
	2: "PREV",
	3: "NEXT",
	4: "LAST",
}
var RelType_value = map[string]int32{
	"NONE":  0,
	"FIRST": 1,
	"PREV":  2,
	"NEXT":  3,
	"LAST":  4,
}

func (x RelType) String() string {
	return proto.EnumName(RelType_name, int32(x))
}
func (RelType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Output Format
type ListLogRequest_LogFormat int32

const (
	ListLogRequest_JSON ListLogRequest_LogFormat = 0
	ListLogRequest_CSV  ListLogRequest_LogFormat = 1
	ListLogRequest_XLSX ListLogRequest_LogFormat = 2
)

var ListLogRequest_LogFormat_name = map[int32]string{
	0: "JSON",
	1: "CSV",
	2: "XLSX",
}
var ListLogRequest_LogFormat_value = map[string]int32{
	"JSON": 0,
	"CSV":  1,
	"XLSX": 2,
}

func (x ListLogRequest_LogFormat) String() string {
	return proto.EnumName(ListLogRequest_LogFormat_name, int32(x))
}
func (ListLogRequest_LogFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type RecorderPutResponse struct {
}

func (m *RecorderPutResponse) Reset()                    { *m = RecorderPutResponse{} }
func (m *RecorderPutResponse) String() string            { return proto.CompactTextString(m) }
func (*RecorderPutResponse) ProtoMessage()               {}
func (*RecorderPutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Log is a generic message format used by the sync service
// to publish log messages to the various log repositories (typically, bleve).
type Log struct {
	Message []byte `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Nano    int32  `protobuf:"varint,2,opt,name=Nano" json:"Nano,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Log) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Log) GetNano() int32 {
	if m != nil {
		return m.Nano
	}
	return 0
}

// LogMessage is the format used to transmit log messages to clients via the REST API.
type LogMessage struct {
	// Generic zap fields
	Ts     int32  `protobuf:"varint,1,opt,name=Ts" json:"Ts,omitempty"`
	Level  string `protobuf:"bytes,2,opt,name=Level" json:"Level,omitempty"`
	Logger string `protobuf:"bytes,3,opt,name=Logger" json:"Logger,omitempty"`
	Msg    string `protobuf:"bytes,4,opt,name=Msg" json:"Msg,omitempty"`
	// Pydio specific
	MsgId string `protobuf:"bytes,5,opt,name=MsgId" json:"MsgId,omitempty"`
	// User Info
	UserName  string   `protobuf:"bytes,6,opt,name=UserName" json:"UserName,omitempty"`
	UserUuid  string   `protobuf:"bytes,7,opt,name=UserUuid" json:"UserUuid,omitempty"`
	GroupPath string   `protobuf:"bytes,8,opt,name=GroupPath" json:"GroupPath,omitempty"`
	Profile   string   `protobuf:"bytes,16,opt,name=Profile" json:"Profile,omitempty"`
	RoleUuids []string `protobuf:"bytes,9,rep,name=RoleUuids" json:"RoleUuids,omitempty"`
	// Client info
	RemoteAddress string `protobuf:"bytes,10,opt,name=RemoteAddress" json:"RemoteAddress,omitempty"`
	UserAgent     string `protobuf:"bytes,11,opt,name=UserAgent" json:"UserAgent,omitempty"`
	HttpProtocol  string `protobuf:"bytes,12,opt,name=HttpProtocol" json:"HttpProtocol,omitempty"`
	// Tree Info
	NodeUuid string `protobuf:"bytes,13,opt,name=NodeUuid" json:"NodeUuid,omitempty"`
	NodePath string `protobuf:"bytes,14,opt,name=NodePath" json:"NodePath,omitempty"`
	WsUuid   string `protobuf:"bytes,15,opt,name=WsUuid" json:"WsUuid,omitempty"`
	WsScope  string `protobuf:"bytes,17,opt,name=WsScope" json:"WsScope,omitempty"`
	// Span Info
	SpanUuid       string `protobuf:"bytes,18,opt,name=SpanUuid" json:"SpanUuid,omitempty"`
	SpanParentUuid string `protobuf:"bytes,19,opt,name=SpanParentUuid" json:"SpanParentUuid,omitempty"`
	SpanRootUuid   string `protobuf:"bytes,20,opt,name=SpanRootUuid" json:"SpanRootUuid,omitempty"`
	// High Level Operation Info
	OperationUuid           string `protobuf:"bytes,21,opt,name=OperationUuid" json:"OperationUuid,omitempty"`
	OperationLabel          string `protobuf:"bytes,22,opt,name=OperationLabel" json:"OperationLabel,omitempty"`
	SchedulerJobUuid        string `protobuf:"bytes,23,opt,name=SchedulerJobUuid" json:"SchedulerJobUuid,omitempty"`
	SchedulerTaskUuid       string `protobuf:"bytes,24,opt,name=SchedulerTaskUuid" json:"SchedulerTaskUuid,omitempty"`
	SchedulerTaskActionPath string `protobuf:"bytes,25,opt,name=SchedulerTaskActionPath" json:"SchedulerTaskActionPath,omitempty"`
	// Other Unkown Fields
	JsonZaps string `protobuf:"bytes,26,opt,name=JsonZaps" json:"JsonZaps,omitempty"`
}

func (m *LogMessage) Reset()                    { *m = LogMessage{} }
func (m *LogMessage) String() string            { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()               {}
func (*LogMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogMessage) GetTs() int32 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *LogMessage) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogMessage) GetLogger() string {
	if m != nil {
		return m.Logger
	}
	return ""
}

func (m *LogMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogMessage) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *LogMessage) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LogMessage) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *LogMessage) GetGroupPath() string {
	if m != nil {
		return m.GroupPath
	}
	return ""
}

func (m *LogMessage) GetProfile() string {
	if m != nil {
		return m.Profile
	}
	return ""
}

func (m *LogMessage) GetRoleUuids() []string {
	if m != nil {
		return m.RoleUuids
	}
	return nil
}

func (m *LogMessage) GetRemoteAddress() string {
	if m != nil {
		return m.RemoteAddress
	}
	return ""
}

func (m *LogMessage) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *LogMessage) GetHttpProtocol() string {
	if m != nil {
		return m.HttpProtocol
	}
	return ""
}

func (m *LogMessage) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *LogMessage) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *LogMessage) GetWsUuid() string {
	if m != nil {
		return m.WsUuid
	}
	return ""
}

func (m *LogMessage) GetWsScope() string {
	if m != nil {
		return m.WsScope
	}
	return ""
}

func (m *LogMessage) GetSpanUuid() string {
	if m != nil {
		return m.SpanUuid
	}
	return ""
}

func (m *LogMessage) GetSpanParentUuid() string {
	if m != nil {
		return m.SpanParentUuid
	}
	return ""
}

func (m *LogMessage) GetSpanRootUuid() string {
	if m != nil {
		return m.SpanRootUuid
	}
	return ""
}

func (m *LogMessage) GetOperationUuid() string {
	if m != nil {
		return m.OperationUuid
	}
	return ""
}

func (m *LogMessage) GetOperationLabel() string {
	if m != nil {
		return m.OperationLabel
	}
	return ""
}

func (m *LogMessage) GetSchedulerJobUuid() string {
	if m != nil {
		return m.SchedulerJobUuid
	}
	return ""
}

func (m *LogMessage) GetSchedulerTaskUuid() string {
	if m != nil {
		return m.SchedulerTaskUuid
	}
	return ""
}

func (m *LogMessage) GetSchedulerTaskActionPath() string {
	if m != nil {
		return m.SchedulerTaskActionPath
	}
	return ""
}

func (m *LogMessage) GetJsonZaps() string {
	if m != nil {
		return m.JsonZaps
	}
	return ""
}

// ListLogRequest launches a parameterised query in the log repository and streams the results.
type ListLogRequest struct {
	// Bleve-type Query stsring
	Query string `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
	// Start at page
	Page int32 `protobuf:"varint,2,opt,name=Page" json:"Page,omitempty"`
	// Number of results
	Size   int32                    `protobuf:"varint,3,opt,name=Size" json:"Size,omitempty"`
	Format ListLogRequest_LogFormat `protobuf:"varint,4,opt,name=Format,enum=log.ListLogRequest_LogFormat" json:"Format,omitempty"`
}

func (m *ListLogRequest) Reset()                    { *m = ListLogRequest{} }
func (m *ListLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ListLogRequest) ProtoMessage()               {}
func (*ListLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListLogRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ListLogRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListLogRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListLogRequest) GetFormat() ListLogRequest_LogFormat {
	if m != nil {
		return m.Format
	}
	return ListLogRequest_JSON
}

type ListLogResponse struct {
	LogMessage *LogMessage `protobuf:"bytes,1,opt,name=LogMessage" json:"LogMessage,omitempty"`
}

func (m *ListLogResponse) Reset()                    { *m = ListLogResponse{} }
func (m *ListLogResponse) String() string            { return proto.CompactTextString(m) }
func (*ListLogResponse) ProtoMessage()               {}
func (*ListLogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListLogResponse) GetLogMessage() *LogMessage {
	if m != nil {
		return m.LogMessage
	}
	return nil
}

type DeleteLogsResponse struct {
	Deleted int64 `protobuf:"varint,1,opt,name=Deleted" json:"Deleted,omitempty"`
}

func (m *DeleteLogsResponse) Reset()                    { *m = DeleteLogsResponse{} }
func (m *DeleteLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteLogsResponse) ProtoMessage()               {}
func (*DeleteLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteLogsResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

// TimeRangeResponse contains either one aggregated result of a facetted request
// OR a time range cursor.
type TimeRangeResponse struct {
	TimeRangeResult *TimeRangeResult `protobuf:"bytes,1,opt,name=TimeRangeResult" json:"TimeRangeResult,omitempty"`
	TimeRangeCursor *TimeRangeCursor `protobuf:"bytes,2,opt,name=TimeRangeCursor" json:"TimeRangeCursor,omitempty"`
}

func (m *TimeRangeResponse) Reset()                    { *m = TimeRangeResponse{} }
func (m *TimeRangeResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeRangeResponse) ProtoMessage()               {}
func (*TimeRangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TimeRangeResponse) GetTimeRangeResult() *TimeRangeResult {
	if m != nil {
		return m.TimeRangeResult
	}
	return nil
}

func (m *TimeRangeResponse) GetTimeRangeCursor() *TimeRangeCursor {
	if m != nil {
		return m.TimeRangeCursor
	}
	return nil
}

// TimeRangeResult represents one point of a graph.
type TimeRangeResult struct {
	// a label for this time range
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	// begin timestamp
	Start int32 `protobuf:"varint,2,opt,name=Start" json:"Start,omitempty"`
	// end timestamp
	End int32 `protobuf:"varint,3,opt,name=End" json:"End,omitempty"`
	// nb of occurrences found within this range
	Count int32 `protobuf:"varint,4,opt,name=Count" json:"Count,omitempty"`
	// a score between 1 and 100 that gives the relevance of this result:
	// if End > now, we ponderate the returned count with the duration of the last time range
	// for instance for a hour range if now is 6PM, last count will be
	// multiplied by 4/3 and have a relevance of 75.
	// Relevance will be almost always equals to 100
	Relevance int32 `protobuf:"varint,5,opt,name=Relevance" json:"Relevance,omitempty"`
}

func (m *TimeRangeResult) Reset()                    { *m = TimeRangeResult{} }
func (m *TimeRangeResult) String() string            { return proto.CompactTextString(m) }
func (*TimeRangeResult) ProtoMessage()               {}
func (*TimeRangeResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TimeRangeResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TimeRangeResult) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *TimeRangeResult) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *TimeRangeResult) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TimeRangeResult) GetRelevance() int32 {
	if m != nil {
		return m.Relevance
	}
	return 0
}

// TimeRangeRequest contains the parameter to configure the query to
// retrieve the number of audit events of this type for a given time range
// defined by last timestamp and a range type.
type TimeRangeRequest struct {
	// Type of event we are auditing
	MsgId string `protobuf:"bytes,1,opt,name=MsgId" json:"MsgId,omitempty"`
	// Known types: H, D, W, M or Y
	TimeRangeType string `protobuf:"bytes,2,opt,name=TimeRangeType" json:"TimeRangeType,omitempty"`
	// Upper bound for our request
	RefTime int32 `protobuf:"varint,3,opt,name=RefTime" json:"RefTime,omitempty"`
}

func (m *TimeRangeRequest) Reset()                    { *m = TimeRangeRequest{} }
func (m *TimeRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeRangeRequest) ProtoMessage()               {}
func (*TimeRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TimeRangeRequest) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *TimeRangeRequest) GetTimeRangeType() string {
	if m != nil {
		return m.TimeRangeType
	}
	return ""
}

func (m *TimeRangeRequest) GetRefTime() int32 {
	if m != nil {
		return m.RefTime
	}
	return 0
}

// Ease implementation of data navigation for a chart.
type TimeRangeCursor struct {
	Rel     RelType `protobuf:"varint,1,opt,name=Rel,enum=log.RelType" json:"Rel,omitempty"`
	RefTime int32   `protobuf:"varint,2,opt,name=RefTime" json:"RefTime,omitempty"`
	Count   int32   `protobuf:"varint,3,opt,name=Count" json:"Count,omitempty"`
}

func (m *TimeRangeCursor) Reset()                    { *m = TimeRangeCursor{} }
func (m *TimeRangeCursor) String() string            { return proto.CompactTextString(m) }
func (*TimeRangeCursor) ProtoMessage()               {}
func (*TimeRangeCursor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TimeRangeCursor) GetRel() RelType {
	if m != nil {
		return m.Rel
	}
	return RelType_NONE
}

func (m *TimeRangeCursor) GetRefTime() int32 {
	if m != nil {
		return m.RefTime
	}
	return 0
}

func (m *TimeRangeCursor) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*RecorderPutResponse)(nil), "log.RecorderPutResponse")
	proto.RegisterType((*Log)(nil), "log.Log")
	proto.RegisterType((*LogMessage)(nil), "log.LogMessage")
	proto.RegisterType((*ListLogRequest)(nil), "log.ListLogRequest")
	proto.RegisterType((*ListLogResponse)(nil), "log.ListLogResponse")
	proto.RegisterType((*DeleteLogsResponse)(nil), "log.DeleteLogsResponse")
	proto.RegisterType((*TimeRangeResponse)(nil), "log.TimeRangeResponse")
	proto.RegisterType((*TimeRangeResult)(nil), "log.TimeRangeResult")
	proto.RegisterType((*TimeRangeRequest)(nil), "log.TimeRangeRequest")
	proto.RegisterType((*TimeRangeCursor)(nil), "log.TimeRangeCursor")
	proto.RegisterEnum("log.RelType", RelType_name, RelType_value)
	proto.RegisterEnum("log.ListLogRequest_LogFormat", ListLogRequest_LogFormat_name, ListLogRequest_LogFormat_value)
}

func init() { proto.RegisterFile("log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0x5f, 0x6f, 0xdb, 0x36,
	0x10, 0x8f, 0xac, 0xd8, 0xb1, 0x2f, 0x89, 0xa3, 0x30, 0xff, 0xb8, 0x60, 0x1b, 0x02, 0xa1, 0x18,
	0x82, 0x62, 0xc8, 0x8a, 0x14, 0x03, 0x36, 0xa0, 0x18, 0xe0, 0x65, 0xe9, 0xd6, 0x40, 0x71, 0x34,
	0xca, 0x6d, 0x83, 0xbd, 0x29, 0xd6, 0x55, 0x31, 0x26, 0x8b, 0x9a, 0x28, 0x15, 0xe8, 0xde, 0xf6,
	0x19, 0xf6, 0x41, 0xf6, 0xba, 0x2f, 0x37, 0x60, 0xe0, 0x51, 0x92, 0x2d, 0xbb, 0x7d, 0xe3, 0xef,
	0x77, 0xbf, 0xbb, 0xe3, 0x91, 0x77, 0x24, 0x0c, 0x12, 0x19, 0x5f, 0x64, 0xb9, 0x2c, 0x24, 0xb3,
	0x13, 0x19, 0xbb, 0x47, 0x70, 0x20, 0x70, 0x2a, 0xf3, 0x08, 0x73, 0xbf, 0x2c, 0x04, 0xaa, 0x4c,
	0xa6, 0x0a, 0xdd, 0xe7, 0x60, 0x7b, 0x32, 0x66, 0x1c, 0xb6, 0x6e, 0x51, 0xa9, 0x30, 0x46, 0x6e,
	0x9d, 0x59, 0xe7, 0x3b, 0xa2, 0x86, 0x8c, 0xc1, 0xe6, 0x38, 0x4c, 0x25, 0xef, 0x9c, 0x59, 0xe7,
	0x5d, 0x41, 0x6b, 0xf7, 0xdf, 0x1e, 0x80, 0x27, 0xe3, 0x5a, 0x32, 0x84, 0xce, 0x44, 0x91, 0x5f,
	0x57, 0x74, 0x26, 0x8a, 0x1d, 0x42, 0xd7, 0xc3, 0xf7, 0x98, 0x90, 0xcf, 0x40, 0x18, 0xc0, 0x8e,
	0xa1, 0xe7, 0xc9, 0x38, 0xc6, 0x9c, 0xdb, 0x44, 0x57, 0x88, 0x39, 0x60, 0xdf, 0xaa, 0x98, 0x6f,
	0x12, 0xa9, 0x97, 0xda, 0xff, 0x56, 0xc5, 0xaf, 0x22, 0xde, 0x35, 0xfe, 0x04, 0xd8, 0x29, 0xf4,
	0x5f, 0x2b, 0xcc, 0xc7, 0xe1, 0x1c, 0x79, 0x8f, 0x0c, 0x0d, 0xae, 0x6d, 0xaf, 0xcb, 0x59, 0xc4,
	0xb7, 0x16, 0x36, 0x8d, 0xd9, 0xe7, 0x30, 0xf8, 0x39, 0x97, 0x65, 0xe6, 0x87, 0xc5, 0x23, 0xef,
	0x93, 0x71, 0x41, 0xe8, 0xc2, 0xfd, 0x5c, 0xbe, 0x9b, 0x25, 0xc8, 0x1d, 0xb2, 0xd5, 0x50, 0xfb,
	0x09, 0x99, 0xa0, 0x8e, 0xa1, 0xf8, 0xe0, 0xcc, 0xd6, 0x7e, 0x0d, 0xc1, 0x9e, 0xc0, 0xae, 0xc0,
	0xb9, 0x2c, 0x70, 0x14, 0x45, 0x39, 0x2a, 0xc5, 0x81, 0xbc, 0xdb, 0xa4, 0x8e, 0xa1, 0xf7, 0x31,
	0x8a, 0x31, 0x2d, 0xf8, 0xb6, 0xc9, 0xdd, 0x10, 0xcc, 0x85, 0x9d, 0x5f, 0x8a, 0x22, 0xf3, 0xf5,
	0x25, 0x4d, 0x65, 0xc2, 0x77, 0x48, 0xd0, 0xe2, 0x74, 0x65, 0x63, 0x19, 0x51, 0x52, 0xbe, 0x6b,
	0x2a, 0xab, 0x71, 0x6d, 0xa3, 0xc2, 0x86, 0x0b, 0x1b, 0xd5, 0x75, 0x0c, 0xbd, 0xb7, 0x8a, 0xbc,
	0xf6, 0xcc, 0x69, 0x1b, 0xa4, 0xeb, 0x7d, 0xab, 0x82, 0xa9, 0xcc, 0x90, 0xef, 0x9b, 0x7a, 0x2b,
	0xa8, 0xa3, 0x05, 0x59, 0x98, 0x92, 0x0f, 0x33, 0xd1, 0x6a, 0xcc, 0xbe, 0x82, 0xa1, 0x5e, 0xfb,
	0x61, 0x8e, 0x69, 0x41, 0x8a, 0x03, 0x52, 0xac, 0xb0, 0xba, 0x22, 0xcd, 0x08, 0x29, 0x8d, 0xea,
	0xd0, 0x54, 0xb4, 0xcc, 0xe9, 0x93, 0xbb, 0xcb, 0x30, 0x0f, 0x8b, 0x99, 0x34, 0xc9, 0x8e, 0xcc,
	0xc9, 0xb5, 0x48, 0x9d, 0xb1, 0x21, 0xbc, 0xf0, 0x01, 0x13, 0x7e, 0x6c, 0x32, 0xb6, 0x59, 0xf6,
	0x14, 0x9c, 0x60, 0xfa, 0x88, 0x51, 0x99, 0x60, 0x7e, 0x23, 0x1f, 0x28, 0xe0, 0x09, 0x29, 0xd7,
	0x78, 0xf6, 0x35, 0xec, 0x37, 0xdc, 0x24, 0x54, 0xbf, 0x93, 0x98, 0x93, 0x78, 0xdd, 0xc0, 0xbe,
	0x83, 0x93, 0x16, 0x39, 0x9a, 0xea, 0xac, 0x74, 0xd8, 0x9f, 0x91, 0xcf, 0xa7, 0xcc, 0xfa, 0x24,
	0x6f, 0x94, 0x4c, 0x7f, 0x0b, 0x33, 0xc5, 0x4f, 0xcd, 0x49, 0xd6, 0xd8, 0xfd, 0xc7, 0x82, 0xa1,
	0x37, 0x53, 0x85, 0x27, 0x63, 0x81, 0x7f, 0x94, 0xa8, 0x0a, 0xdd, 0xee, 0xbf, 0x96, 0x98, 0x7f,
	0xa0, 0x09, 0x1a, 0x08, 0x03, 0xf4, 0xdc, 0xf9, 0x7a, 0x1c, 0xab, 0xb9, 0xf3, 0xab, 0x59, 0x0c,
	0x66, 0x7f, 0x22, 0x0d, 0x50, 0x57, 0xd0, 0x9a, 0x7d, 0x0b, 0xbd, 0x97, 0x32, 0x9f, 0x87, 0x05,
	0x4d, 0xd0, 0xf0, 0xf2, 0x8b, 0x0b, 0x3d, 0xf8, 0xed, 0x14, 0x17, 0x9e, 0x8c, 0x8d, 0x48, 0x54,
	0x62, 0xf7, 0x1c, 0x06, 0x0d, 0xc9, 0xfa, 0xb0, 0x79, 0x13, 0xdc, 0x8d, 0x9d, 0x0d, 0xb6, 0x05,
	0xf6, 0x55, 0xf0, 0xc6, 0xb1, 0x34, 0x75, 0xef, 0x05, 0xf7, 0x4e, 0xc7, 0xfd, 0x11, 0xf6, 0x9a,
	0x68, 0xe6, 0xd1, 0x60, 0xdf, 0x2c, 0x8f, 0x3f, 0x6d, 0x7b, 0xfb, 0x72, 0xcf, 0xe4, 0x6d, 0x68,
	0xb1, 0x24, 0x71, 0x2f, 0x80, 0xfd, 0x84, 0x09, 0x16, 0xe8, 0xc9, 0x58, 0x35, 0x61, 0x38, 0x6c,
	0x19, 0x36, 0xa2, 0x18, 0xb6, 0xa8, 0xa1, 0xfb, 0xb7, 0x05, 0xfb, 0x93, 0xd9, 0x1c, 0x45, 0x98,
	0xc6, 0xd8, 0xe8, 0x7f, 0x80, 0xbd, 0x65, 0xb2, 0x4c, 0x8a, 0x2a, 0xf7, 0x21, 0xe5, 0x5e, 0xb1,
	0x89, 0x55, 0x71, 0xcb, 0xff, 0xaa, 0xcc, 0x95, 0xcc, 0xe9, 0x74, 0xd7, 0xfc, 0x8d, 0x4d, 0xac,
	0x8a, 0xdd, 0xbf, 0xac, 0xb5, 0x0d, 0x98, 0xe7, 0x71, 0x8e, 0xd5, 0xdd, 0xd1, 0x5a, 0x5f, 0x68,
	0x50, 0x84, 0x79, 0x51, 0xdd, 0x9d, 0x01, 0xfa, 0x9d, 0xbb, 0x4e, 0xa3, 0xea, 0xee, 0xf4, 0x52,
	0xeb, 0xae, 0x64, 0x99, 0x9a, 0x9b, 0xeb, 0x0a, 0x03, 0xe8, 0xdd, 0xc1, 0x04, 0xdf, 0x87, 0xe9,
	0x14, 0xe9, 0x05, 0xec, 0x8a, 0x05, 0xe1, 0x3e, 0x82, 0xb3, 0xb4, 0x85, 0xa6, 0x81, 0xcc, 0x7b,
	0x69, 0x2d, 0xbf, 0x97, 0x4f, 0x60, 0xb7, 0x51, 0x4e, 0x3e, 0x64, 0x58, 0xbd, 0xc6, 0x6d, 0x52,
	0xdf, 0x81, 0xc0, 0x77, 0x9a, 0xab, 0x76, 0x56, 0x43, 0x37, 0x5c, 0x3b, 0x2d, 0xf6, 0x25, 0xd8,
	0x02, 0x13, 0x4a, 0x33, 0xbc, 0xdc, 0xa1, 0x43, 0x13, 0x98, 0xe8, 0x38, 0x42, 0x1b, 0x96, 0x83,
	0x75, 0x5a, 0xc1, 0x16, 0xa5, 0xda, 0x4b, 0xa5, 0x3e, 0x7d, 0xa1, 0xf5, 0xe4, 0xaf, 0xfb, 0x6d,
	0x7c, 0x37, 0xbe, 0x76, 0x36, 0xd8, 0x00, 0xba, 0x2f, 0x5f, 0x89, 0x60, 0x62, 0x9a, 0xd0, 0x17,
	0xd7, 0x6f, 0x9c, 0x0e, 0x99, 0xaf, 0xef, 0x27, 0x8e, 0xad, 0x57, 0xde, 0x28, 0x98, 0x38, 0x9b,
	0x97, 0xff, 0x59, 0xb0, 0x4d, 0x5d, 0x69, 0x7e, 0x35, 0xf6, 0x0c, 0x7a, 0x7e, 0xa9, 0xfb, 0x94,
	0xf5, 0xeb, 0x5e, 0x3c, 0xe5, 0xd5, 0x26, 0xd7, 0x3f, 0xbe, 0x8d, 0x73, 0x8b, 0x7d, 0x0f, 0xfd,
	0xaa, 0xb5, 0x15, 0x3b, 0xf8, 0xc8, 0xdc, 0x9c, 0x1e, 0xb6, 0xc9, 0xda, 0xf5, 0x99, 0xc5, 0x5e,
	0x00, 0x2c, 0x3a, 0xfa, 0xe3, 0xce, 0x27, 0x44, 0xae, 0xf7, 0xbd, 0xbb, 0xc1, 0xae, 0x60, 0x38,
	0x8a, 0xe3, 0x1c, 0xe3, 0xb0, 0xc0, 0x88, 0x22, 0x1c, 0xad, 0xb6, 0xb0, 0x89, 0x71, 0xbc, 0xd6,
	0xd9, 0xcd, 0x16, 0x1e, 0x7a, 0xf4, 0xbb, 0x3f, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xb6,
	0xba, 0xc4, 0xea, 0x07, 0x00, 0x00,
}
