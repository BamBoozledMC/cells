/*
 * Copyright (c) 2019. Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// Package cache provides ready-to-use in-memory cache mechanisms
package cache

import (
	"errors"
	"time"

	gocache "github.com/patrickmn/go-cache"
)

type Cache interface {
	Close() error
	Get(key string) ([]byte, error)
	Set(key string, entry []byte) error
	Append(key string, entry []byte) error
	Delete(key string) error
	Reset() error
	Capacity() int
	Iterator() Iterator
}

type Iterator interface {
	SetNext() bool
	Value() (Info, error)
}

type Info interface {
	Key() string
}

type simplecache struct {
	*gocache.Cache
}

func NewSimpleCache() Cache {
	return &simplecache{
		gocache.New(5*time.Second, 10*time.Minute),
	}
}

func (c *simplecache) Close() error {
	c.Cache.Flush()
	return nil
}
func (c *simplecache) Get(key string) ([]byte, error) {
	i, ok := c.Cache.Get(key)
	if !ok {
		return nil, errors.New("not found")
	}

	return i.([]byte), nil
}
func (c *simplecache) Set(key string, entry []byte) error {
	c.Cache.Set(key, entry, 5*time.Second)

	return nil
}
func (c *simplecache) Append(key string, entry []byte) error {
	return nil
}
func (c *simplecache) Delete(key string) error {
	c.Cache.Delete(key)
	return nil
}
func (c *simplecache) Reset() error {
	c.Cache.Flush()
	return nil
}
func (c *simplecache) Capacity() int {
	return 0
}
func (c *simplecache) Iterator() Iterator {
	return &iterator{}
}

type iterator struct{}

func (i *iterator) SetNext() bool {
	return true
}

func (i *iterator) Value() (Info, error) {
	return &info{}, nil
}

type info struct{}

func (i *info) Key() string {
	return ""
}
